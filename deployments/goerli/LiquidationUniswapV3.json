{
  "address": "0x239FFD298CEB894b111a600808C27274B6b821aC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "clientAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenFrom",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenTo",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "poolFee",
              "type": "uint24"
            }
          ],
          "internalType": "struct ILiquidationProtocol.LiquidateParams",
          "name": "lparams",
          "type": "tuple"
        }
      ],
      "name": "getApproveAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "clientAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenFrom",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenTo",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "poolFee",
              "type": "uint24"
            }
          ],
          "internalType": "struct ILiquidationProtocol.LiquidateParams",
          "name": "lparams",
          "type": "tuple"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILiquidationProtocol.LiquidatedAmount[]",
          "name": "amounts",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x770afcec5027be1d2accd87e0962b39204a8c850a029327221c9932fbf58a770",
  "receipt": {
    "to": null,
    "from": "0x0858e5aCF759EC6e071f7CedC177f4085c722b8B",
    "contractAddress": "0x239FFD298CEB894b111a600808C27274B6b821aC",
    "transactionIndex": 1,
    "gasUsed": "1121992",
    "logsBloom": "0x
    "blockHash": "0xec7fcbcf7ac7371363047d34c053e2961fc8fec38e1e55d4a8aeb6b0c5c2ab2c",
    "transactionHash": "0x770afcec5027be1d2accd87e0962b39204a8c850a029327221c9932fbf58a770",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 7451394,
        "transactionHash": "0x770afcec5027be1d2accd87e0962b39204a8c850a029327221c9932fbf58a770",
        "address": "0x239FFD298CEB894b111a600808C27274B6b821aC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000858e5acf759ec6e071f7cedc177f4085c722b8b"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xec7fcbcf7ac7371363047d34c053e2961fc8fec38e1e55d4a8aeb6b0c5c2ab2c"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 7451394,
        "transactionHash": "0x770afcec5027be1d2accd87e0962b39204a8c850a029327221c9932fbf58a770",
        "address": "0x239FFD298CEB894b111a600808C27274B6b821aC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000858e5acf759ec6e071f7cedc177f4085c722b8b",
          "0x000000000000000000000000f2d8e40a7761cf301aa5babc436d77dfd456d8dc"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xec7fcbcf7ac7371363047d34c053e2961fc8fec38e1e55d4a8aeb6b0c5c2ab2c"
      }
    ],
    "blockNumber": 7451394,
    "cumulativeGasUsed": "1287429",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE592427A0AEce92De3Edee1F18E0157C05861564",
    "0xF2d8E40a7761cF301AA5BABC436d77dfD456d8dc"
  ],
  "numDeployments": 1,
  "solcInputHash": "7bc9459bb57cd8cc0eb8f51073ab0ff6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"internalType\":\"struct ILiquidationProtocol.LiquidateParams\",\"name\":\"lparams\",\"type\":\"tuple\"}],\"name\":\"getApproveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"internalType\":\"struct ILiquidationProtocol.LiquidateParams\",\"name\":\"lparams\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidationProtocol.LiquidatedAmount[]\",\"name\":\"amounts\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"swap((address,address,address,uint256,uint24))\":{\"details\":\"The calling address must approve this contract to spend at least `amountIn` worth of its DAI for this function to succeed.\",\"params\":{\"lparams\":\"check ILiquidationProtocol.LiquidateParams for params strut.\"},\"returns\":{\"amounts\":\"The amount of target token received.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swap((address,address,address,uint256,uint24))\":{\"notice\":\"swap swaps token on uniswap v3. calls `exactInputSingle` in the swap router.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidationUniswapV3.sol\":\"LiquidationUniswapV3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/LiquidationUniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/ILiquidationProtocol.sol\\\";\\nimport \\\"./access/Ownable.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract LiquidationUniswapV3 is ILiquidationProtocol, Ownable {\\n\\n\\t// @dev swap router address: refer https://docs.uniswap.org/protocol/reference/deployments\\n    ISwapRouter public immutable swapRouter;\\n    \\n    constructor(ISwapRouter _swapRouter, address poolAddress) {\\n        swapRouter = _swapRouter;\\n        Ownable._setOwner(poolAddress);\\n    }\\n    \\n    /// @notice swap swaps token on uniswap v3.\\n    /// calls `exactInputSingle` in the swap router.\\n    /// @dev The calling address must approve this contract to spend at least `amountIn` worth of its DAI for this function to succeed.\\n    /// @param lparams check ILiquidationProtocol.LiquidateParams for params strut.\\n    /// @return amounts The amount of target token received.\\n\\tfunction swap(\\n\\t\\tLiquidateParams memory lparams\\n\\t) external override onlyOwner returns (LiquidatedAmount[] memory amounts){\\n        // msg.sender must approve this contract - should always be InfinityPool\\n        TransferHelper.safeTransferFrom(lparams.tokenFrom, msg.sender, address(this), lparams.amountIn);\\n        TransferHelper.safeApprove(lparams.tokenFrom, address(swapRouter), lparams.amountIn);\\n        // console.log(\\\"approved token from adaptor to router\\\");\\n\\n        // Naively set amountOutMinimum to 0. In production, use an oracle or other data source to choose a safer value for amountOutMinimum.\\n        // We also set the sqrtPriceLimitx96 to be 0 to ensure we swap our exact input amount.\\n        ISwapRouter.ExactInputSingleParams memory params =\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: lparams.tokenFrom,\\n                tokenOut: lparams.tokenTo,\\n                fee: lparams.poolFee,\\n                recipient: msg.sender,\\n                deadline: block.timestamp*2,\\n                amountIn: lparams.amountIn,\\n                amountOutMinimum: 0,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        // The call to `exactInputSingle` executes the swap.\\n        uint256 amountOut = swapRouter.exactInputSingle(params);\\n        amounts = new LiquidatedAmount[](1);\\n        amounts[0] = LiquidatedAmount(lparams.tokenTo,amountOut);\\n\\t}\\n    \\n\\tfunction getApproveAmount(LiquidateParams memory lparams) pure external override returns (uint256 amountOut) { amountOut = lparams.amountIn; }\\n\\n}\\n\",\"keccak256\":\"0x6104c9dbf393684b7dfee70a6bfd3463bfcfd12c6e5ec663a2cc08072aecc842\",\"license\":\"UNLICENSED\"},\"contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x0bc0f717aa9bf5d9996cdd6930d7b86bc10c000318330249e5d57e61350694f5\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidationProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\ninterface ILiquidationProtocol {\\n\\n\\tstruct LiquidateParams {\\n\\t\\taddress clientAddress;\\n\\t\\taddress tokenFrom;\\n\\t\\taddress tokenTo;\\n\\t\\tuint256 amountIn; // for ERC721: amountIn is tokenId\\n\\t\\tuint24 poolFee;\\n\\t}\\n\\n\\tstruct LiquidatedAmount {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\t\\n\\tfunction swap(\\n\\t\\tLiquidateParams memory lparams\\n\\t) external returns (LiquidatedAmount[] memory amounts);\\n\\t\\n\\tfunction getApproveAmount(\\n\\t\\tLiquidateParams memory lparams\\n\\t) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x501ba4987b4587c629638819a4685451ccf2bf3dad7e8c13b6aa2b5c7cfc5a55\",\"license\":\"UNLICENSED\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nlibrary TransferHelper {\\n    function safeApprove( address token, address to, uint256 value ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require( success && (data.length == 0 || abi.decode(data, (bool))), 'approve failed' );\\n    }\\n\\n    function safeTransferFrom( address token, address from, address to, uint256 value ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require( success && (data.length == 0 || abi.decode(data, (bool))), 'transferFrom failed' );\\n    }\\n\\n    function safeTransfer( address token, address to, uint256 value ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require( success && (data.length == 0 || abi.decode(data, (bool))), 'transfer failed' );\\n    }\\n\\n    function safeTransferFromERC721( address token, address from, address to, uint256 tokenId ) internal {\\n        // bytes4(keccak256(bytes('safeTransferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x42842e0e, from, to, tokenId));\\n        require( success && (data.length == 0 || abi.decode(data, (bool))), 'erc721 safeTransferFrom failed' );\\n    }\\n\\n    function balanceOf( address token, address account ) internal returns (uint256 balance){\\n        // bytes4(keccak256(bytes('balanceOf(address)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x70a08231, account));\\n        require(success,'balanceOf failed');\\n        balance = abi.decode(data, (uint256));\\n    }\\n}\",\"keccak256\":\"0x68697fd31366b389299c51eb23d12c6e6372c0b289616228ae9b70c660126154\",\"license\":\"UNLICENSED\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xb4a78da2cdb3e2e0e1ae8fe83fd8e477fc06911dafc170779714c3a0b5cff20e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200155838038062001558833981810160405281019062000037919062000224565b620000576200004b620000a960201b60201c565b620000b160201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050620000a181620000b160201b620005ce1760201c565b50506200026b565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001a7826200017a565b9050919050565b6000620001bb826200019a565b9050919050565b620001cd81620001ae565b8114620001d957600080fd5b50565b600081519050620001ed81620001c2565b92915050565b620001fe816200019a565b81146200020a57600080fd5b50565b6000815190506200021e81620001f3565b92915050565b600080604083850312156200023e576200023d62000175565b5b60006200024e85828601620001dc565b925050602062000261858286016200020d565b9150509250929050565b6080516112c362000295600039600081816101ea015281816102a8015261038e01526112c36000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806324cfea2414610067578063715018a6146100975780638da5cb5b146100a1578063c31c9c07146100bf578063d2827962146100dd578063f2fde38b1461010d575b600080fd5b610081600480360381019061007c9190610b34565b610129565b60405161008e9190610b70565b60405180910390f35b61009f610137565b005b6100a96101bf565b6040516100b69190610b9a565b60405180910390f35b6100c76101e8565b6040516100d49190610c14565b60405180910390f35b6100f760048036038101906100f29190610b34565b61020c565b6040516101049190610d2b565b60405180910390f35b61012760048036038101906101229190610d4d565b6104d6565b005b600081606001519050919050565b61013f610692565b73ffffffffffffffffffffffffffffffffffffffff1661015d6101bf565b73ffffffffffffffffffffffffffffffffffffffff16146101b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101aa90610dd7565b60405180910390fd5b6101bd60006105ce565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060610216610692565b73ffffffffffffffffffffffffffffffffffffffff166102346101bf565b73ffffffffffffffffffffffffffffffffffffffff161461028a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028190610dd7565b60405180910390fd5b61029e82602001513330856060015161069a565b6102d182602001517f000000000000000000000000000000000000000000000000000000000000000084606001516107d3565b6000604051806101000160405280846020015173ffffffffffffffffffffffffffffffffffffffff168152602001846040015173ffffffffffffffffffffffffffffffffffffffff168152602001846080015162ffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016002426103579190610e26565b81526020018460600151815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389836040518263ffffffff1660e01b81526004016103e59190610f40565b6020604051808303816000875af1158015610404573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104289190610f71565b9050600167ffffffffffffffff8111156104455761044461095e565b5b60405190808252806020026020018201604052801561047e57816020015b61046b610909565b8152602001906001900390816104635790505b5092506040518060400160405280856040015173ffffffffffffffffffffffffffffffffffffffff16815260200182815250836000815181106104c4576104c3610f9e565b5b60200260200101819052505050919050565b6104de610692565b73ffffffffffffffffffffffffffffffffffffffff166104fc6101bf565b73ffffffffffffffffffffffffffffffffffffffff1614610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054990610dd7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b99061103f565b60405180910390fd5b6105cb816105ce565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016106ce9392919061105f565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161071c9190611110565b6000604051808303816000865af19150503d8060008114610759576040519150601f19603f3d011682016040523d82523d6000602084013e61075e565b606091505b509150915081801561078c575060008151148061078b57508080602001905181019061078a919061115f565b5b5b6107cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c2906111d8565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b385856040516024016108059291906111f8565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108539190611110565b6000604051808303816000865af19150503d8060008114610890576040519150601f19603f3d011682016040523d82523d6000602084013e610895565b606091505b50915091508180156108c357506000815114806108c25750808060200190518101906108c1919061115f565b5b5b610902576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f99061126d565b60405180910390fd5b5050505050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109968261094d565b810181811067ffffffffffffffff821117156109b5576109b461095e565b5b80604052505050565b60006109c8610939565b90506109d4828261098d565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a04826109d9565b9050919050565b610a14816109f9565b8114610a1f57600080fd5b50565b600081359050610a3181610a0b565b92915050565b6000819050919050565b610a4a81610a37565b8114610a5557600080fd5b50565b600081359050610a6781610a41565b92915050565b600062ffffff82169050919050565b610a8581610a6d565b8114610a9057600080fd5b50565b600081359050610aa281610a7c565b92915050565b600060a08284031215610abe57610abd610948565b5b610ac860a06109be565b90506000610ad884828501610a22565b6000830152506020610aec84828501610a22565b6020830152506040610b0084828501610a22565b6040830152506060610b1484828501610a58565b6060830152506080610b2884828501610a93565b60808301525092915050565b600060a08284031215610b4a57610b49610943565b5b6000610b5884828501610aa8565b91505092915050565b610b6a81610a37565b82525050565b6000602082019050610b856000830184610b61565b92915050565b610b94816109f9565b82525050565b6000602082019050610baf6000830184610b8b565b92915050565b6000819050919050565b6000610bda610bd5610bd0846109d9565b610bb5565b6109d9565b9050919050565b6000610bec82610bbf565b9050919050565b6000610bfe82610be1565b9050919050565b610c0e81610bf3565b82525050565b6000602082019050610c296000830184610c05565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610c64816109f9565b82525050565b610c7381610a37565b82525050565b604082016000820151610c8f6000850182610c5b565b506020820151610ca26020850182610c6a565b50505050565b6000610cb48383610c79565b60408301905092915050565b6000602082019050919050565b6000610cd882610c2f565b610ce28185610c3a565b9350610ced83610c4b565b8060005b83811015610d1e578151610d058882610ca8565b9750610d1083610cc0565b925050600181019050610cf1565b5085935050505092915050565b60006020820190508181036000830152610d458184610ccd565b905092915050565b600060208284031215610d6357610d62610943565b5b6000610d7184828501610a22565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610dc1602083610d7a565b9150610dcc82610d8b565b602082019050919050565b60006020820190508181036000830152610df081610db4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e3182610a37565b9150610e3c83610a37565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e7557610e74610df7565b5b828202905092915050565b610e8981610a6d565b82525050565b610e98816109d9565b82525050565b61010082016000820151610eb56000850182610c5b565b506020820151610ec86020850182610c5b565b506040820151610edb6040850182610e80565b506060820151610eee6060850182610c5b565b506080820151610f016080850182610c6a565b5060a0820151610f1460a0850182610c6a565b5060c0820151610f2760c0850182610c6a565b5060e0820151610f3a60e0850182610e8f565b50505050565b600061010082019050610f566000830184610e9e565b92915050565b600081519050610f6b81610a41565b92915050565b600060208284031215610f8757610f86610943565b5b6000610f9584828501610f5c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611029602683610d7a565b915061103482610fcd565b604082019050919050565b600060208201905081810360008301526110588161101c565b9050919050565b60006060820190506110746000830186610b8b565b6110816020830185610b8b565b61108e6040830184610b61565b949350505050565b600081519050919050565b600081905092915050565b60005b838110156110ca5780820151818401526020810190506110af565b838111156110d9576000848401525b50505050565b60006110ea82611096565b6110f481856110a1565b93506111048185602086016110ac565b80840191505092915050565b600061111c82846110df565b915081905092915050565b60008115159050919050565b61113c81611127565b811461114757600080fd5b50565b60008151905061115981611133565b92915050565b60006020828403121561117557611174610943565b5b60006111838482850161114a565b91505092915050565b7f7472616e7366657246726f6d206661696c656400000000000000000000000000600082015250565b60006111c2601383610d7a565b91506111cd8261118c565b602082019050919050565b600060208201905081810360008301526111f1816111b5565b9050919050565b600060408201905061120d6000830185610b8b565b61121a6020830184610b61565b9392505050565b7f617070726f7665206661696c6564000000000000000000000000000000000000600082015250565b6000611257600e83610d7a565b915061126282611221565b602082019050919050565b600060208201905081810360008301526112868161124a565b905091905056fea26469706673582212205aaf7c894fac65dae2e0af4ccaaae1adc45e785081ca268e7e587294468eed0a64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806324cfea2414610067578063715018a6146100975780638da5cb5b146100a1578063c31c9c07146100bf578063d2827962146100dd578063f2fde38b1461010d575b600080fd5b610081600480360381019061007c9190610b34565b610129565b60405161008e9190610b70565b60405180910390f35b61009f610137565b005b6100a96101bf565b6040516100b69190610b9a565b60405180910390f35b6100c76101e8565b6040516100d49190610c14565b60405180910390f35b6100f760048036038101906100f29190610b34565b61020c565b6040516101049190610d2b565b60405180910390f35b61012760048036038101906101229190610d4d565b6104d6565b005b600081606001519050919050565b61013f610692565b73ffffffffffffffffffffffffffffffffffffffff1661015d6101bf565b73ffffffffffffffffffffffffffffffffffffffff16146101b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101aa90610dd7565b60405180910390fd5b6101bd60006105ce565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060610216610692565b73ffffffffffffffffffffffffffffffffffffffff166102346101bf565b73ffffffffffffffffffffffffffffffffffffffff161461028a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028190610dd7565b60405180910390fd5b61029e82602001513330856060015161069a565b6102d182602001517f000000000000000000000000000000000000000000000000000000000000000084606001516107d3565b6000604051806101000160405280846020015173ffffffffffffffffffffffffffffffffffffffff168152602001846040015173ffffffffffffffffffffffffffffffffffffffff168152602001846080015162ffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016002426103579190610e26565b81526020018460600151815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389836040518263ffffffff1660e01b81526004016103e59190610f40565b6020604051808303816000875af1158015610404573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104289190610f71565b9050600167ffffffffffffffff8111156104455761044461095e565b5b60405190808252806020026020018201604052801561047e57816020015b61046b610909565b8152602001906001900390816104635790505b5092506040518060400160405280856040015173ffffffffffffffffffffffffffffffffffffffff16815260200182815250836000815181106104c4576104c3610f9e565b5b60200260200101819052505050919050565b6104de610692565b73ffffffffffffffffffffffffffffffffffffffff166104fc6101bf565b73ffffffffffffffffffffffffffffffffffffffff1614610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054990610dd7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b99061103f565b60405180910390fd5b6105cb816105ce565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016106ce9392919061105f565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161071c9190611110565b6000604051808303816000865af19150503d8060008114610759576040519150601f19603f3d011682016040523d82523d6000602084013e61075e565b606091505b509150915081801561078c575060008151148061078b57508080602001905181019061078a919061115f565b5b5b6107cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c2906111d8565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b385856040516024016108059291906111f8565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108539190611110565b6000604051808303816000865af19150503d8060008114610890576040519150601f19603f3d011682016040523d82523d6000602084013e610895565b606091505b50915091508180156108c357506000815114806108c25750808060200190518101906108c1919061115f565b5b5b610902576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f99061126d565b60405180910390fd5b5050505050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109968261094d565b810181811067ffffffffffffffff821117156109b5576109b461095e565b5b80604052505050565b60006109c8610939565b90506109d4828261098d565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a04826109d9565b9050919050565b610a14816109f9565b8114610a1f57600080fd5b50565b600081359050610a3181610a0b565b92915050565b6000819050919050565b610a4a81610a37565b8114610a5557600080fd5b50565b600081359050610a6781610a41565b92915050565b600062ffffff82169050919050565b610a8581610a6d565b8114610a9057600080fd5b50565b600081359050610aa281610a7c565b92915050565b600060a08284031215610abe57610abd610948565b5b610ac860a06109be565b90506000610ad884828501610a22565b6000830152506020610aec84828501610a22565b6020830152506040610b0084828501610a22565b6040830152506060610b1484828501610a58565b6060830152506080610b2884828501610a93565b60808301525092915050565b600060a08284031215610b4a57610b49610943565b5b6000610b5884828501610aa8565b91505092915050565b610b6a81610a37565b82525050565b6000602082019050610b856000830184610b61565b92915050565b610b94816109f9565b82525050565b6000602082019050610baf6000830184610b8b565b92915050565b6000819050919050565b6000610bda610bd5610bd0846109d9565b610bb5565b6109d9565b9050919050565b6000610bec82610bbf565b9050919050565b6000610bfe82610be1565b9050919050565b610c0e81610bf3565b82525050565b6000602082019050610c296000830184610c05565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610c64816109f9565b82525050565b610c7381610a37565b82525050565b604082016000820151610c8f6000850182610c5b565b506020820151610ca26020850182610c6a565b50505050565b6000610cb48383610c79565b60408301905092915050565b6000602082019050919050565b6000610cd882610c2f565b610ce28185610c3a565b9350610ced83610c4b565b8060005b83811015610d1e578151610d058882610ca8565b9750610d1083610cc0565b925050600181019050610cf1565b5085935050505092915050565b60006020820190508181036000830152610d458184610ccd565b905092915050565b600060208284031215610d6357610d62610943565b5b6000610d7184828501610a22565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610dc1602083610d7a565b9150610dcc82610d8b565b602082019050919050565b60006020820190508181036000830152610df081610db4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e3182610a37565b9150610e3c83610a37565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e7557610e74610df7565b5b828202905092915050565b610e8981610a6d565b82525050565b610e98816109d9565b82525050565b61010082016000820151610eb56000850182610c5b565b506020820151610ec86020850182610c5b565b506040820151610edb6040850182610e80565b506060820151610eee6060850182610c5b565b506080820151610f016080850182610c6a565b5060a0820151610f1460a0850182610c6a565b5060c0820151610f2760c0850182610c6a565b5060e0820151610f3a60e0850182610e8f565b50505050565b600061010082019050610f566000830184610e9e565b92915050565b600081519050610f6b81610a41565b92915050565b600060208284031215610f8757610f86610943565b5b6000610f9584828501610f5c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611029602683610d7a565b915061103482610fcd565b604082019050919050565b600060208201905081810360008301526110588161101c565b9050919050565b60006060820190506110746000830186610b8b565b6110816020830185610b8b565b61108e6040830184610b61565b949350505050565b600081519050919050565b600081905092915050565b60005b838110156110ca5780820151818401526020810190506110af565b838111156110d9576000848401525b50505050565b60006110ea82611096565b6110f481856110a1565b93506111048185602086016110ac565b80840191505092915050565b600061111c82846110df565b915081905092915050565b60008115159050919050565b61113c81611127565b811461114757600080fd5b50565b60008151905061115981611133565b92915050565b60006020828403121561117557611174610943565b5b60006111838482850161114a565b91505092915050565b7f7472616e7366657246726f6d206661696c656400000000000000000000000000600082015250565b60006111c2601383610d7a565b91506111cd8261118c565b602082019050919050565b600060208201905081810360008301526111f1816111b5565b9050919050565b600060408201905061120d6000830185610b8b565b61121a6020830184610b61565b9392505050565b7f617070726f7665206661696c6564000000000000000000000000000000000000600082015250565b6000611257600e83610d7a565b915061126282611221565b602082019050919050565b600060208201905081810360008301526112868161124a565b905091905056fea26469706673582212205aaf7c894fac65dae2e0af4ccaaae1adc45e785081ca268e7e587294468eed0a64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "swap((address,address,address,uint256,uint24))": {
        "details": "The calling address must approve this contract to spend at least `amountIn` worth of its DAI for this function to succeed.",
        "params": {
          "lparams": "check ILiquidationProtocol.LiquidateParams for params strut."
        },
        "returns": {
          "amounts": "The amount of target token received."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swap((address,address,address,uint256,uint24))": {
        "notice": "swap swaps token on uniswap v3. calls `exactInputSingle` in the swap router."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6936,
        "contract": "contracts/LiquidationUniswapV3.sol:LiquidationUniswapV3",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}