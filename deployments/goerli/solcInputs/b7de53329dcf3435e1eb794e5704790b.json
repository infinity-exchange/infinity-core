{
  "language": "Solidity",
  "sources": {
    "contracts/InfinityPool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.12;\n\nimport \"./interfaces/IInfinityPool.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./interfaces/IInfinityToken.sol\";\nimport \"./interfaces/ILiquidationProtocol.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"./libraries/ERC721Validator.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n// import \"hardhat/console.sol\";\n\ncontract InfinityPool is IERC721Receiver, IInfinityPool, Initializable, ContextUpgradeable, OwnableUpgradeable {\n\n\tmapping(uint64=>address) liquidationProtocolAddresses; // mapping of addresses of liquidation protocols\n\tmapping(uint64=>int64) productVariables;\n\tmapping(uint=>uint64) priceIndexes; // 13 decimals\n\tIInfinityToken public poolToken;\n\tIWETH public weth;\n\t// ether tokenId = 0\n\tuint tokenLengthLimit; \t\t// hardcoded token amount limit\n\tuint actionLengthLimit; \t// hardcoded action limit\n\n\tfunction version() public pure returns(uint v){\n\t\tv = 14;\n\t}\n\n\tfunction initialize(address _addrPoolToken, address _addrWETH) public initializer{\n\t\ttokenLengthLimit = 1e2; \t\t// hardcoded token amount limit\n\t\tactionLengthLimit = 1e2; \t// hardcoded action limit\n\t\t_setInfinityToken(_addrPoolToken);\n\t\t_setWETH(_addrWETH);\n\t\t__Ownable_init();\n\t}\n\tfunction setInfinityToken(address _addrPoolToken) public onlyOwner {\n\t\t// require(_addrPoolToken != address(0), \"poolToken 0\");\n\t\t_setInfinityToken(_addrPoolToken);\n\t}\n\tfunction _setInfinityToken(address _addrPoolToken) internal {\n\t\tpoolToken = IInfinityToken(_addrPoolToken);\n\t}\n\tfunction setWETH(address _addrWETH) public onlyOwner {\n\t\t// require(_addrWETH != address(0), \"addrWETH 0\");\n\t\t_setWETH(_addrWETH);\n\t}\n\tfunction _setWETH(address _addrWETH) internal {\n\t\tweth = IWETH(_addrWETH);\n\t}\n\n\tfunction deposit(\n\t\tTokenTransfer[] memory tokenTransfers,\n\t\tAction[] calldata actions\n\t) external payable override {\n\t\trequire(msg.value>0||tokenTransfers.length>0||actions.length>0,\"0-len args\");\n\t\trequire(tokenTransfers.length<tokenLengthLimit,\"Token limit\");\n\t\trequire(actions.length<actionLengthLimit,\"Action limit\");\n\n\t\tTokenTransfer[] memory _tt = new TokenTransfer[](tokenTransfers.length+(msg.value>0?1:0));\n\t// take tokens\n\t\tfor(uint i=0;i<tokenTransfers.length;i++){\n\t\t\tuint256 tokenAmount = tokenTransfers[i].amount;\n\t\t\t// TODO check if ether would overflow in iToken\n\t\t\tuint balance = TransferHelper.balanceOf(tokenTransfers[i].token,address(_msgSender()));\n\t\t\tif(ERC721Validator.isERC721(tokenTransfers[i].token)){\n\t\t\t\trequire(ERC721Validator.isERC721Owner(tokenTransfers[i].token,address(_msgSender()),tokenAmount),\"Not ERC721 Owner\");\n\t\t\t\tTransferHelper.safeTransferFromERC721(tokenTransfers[i].token,_msgSender(),address(this),tokenAmount);\n\t\t\t}else{\n\t\t\t\trequire(balance>=tokenAmount,\"Insufficient balance\");\n\t\t\t\tTransferHelper.safeTransferFrom(tokenTransfers[i].token,_msgSender(),address(this),tokenAmount);\n\t\t\t}\n\t\t\t_tt[i] = tokenTransfers[i];\n\t\t}\n\t\t// wrap eth\n\t\tif(msg.value>0){\n\t\t\tweth.deposit{value:msg.value}();\n\t\t\t// new array \n\t\t\t_tt[tokenTransfers.length] = TokenTransfer(address(weth),msg.value);\n\t\t}\n\t\temit DepositsOrActionsTriggered(\n\t\t\t_msgSender(), _tt, actions\n\t\t);\n\t}\n\n\tfunction requestWithdraw(TokenTransfer[] calldata tokenTransfers) external override{\n\t\trequire(tokenTransfers.length>0,\"0-len args\");\n\t\t/* only do checkings */\n\t\tfor(uint i=0;i<tokenTransfers.length;i++){\n\t\t\tif(ERC721Validator.isERC721(tokenTransfers[i].token)){\n\t\t\t\trequire(poolToken.ifUserTokenExistsERC721(_msgSender(), uint256(uint160(tokenTransfers[i].token)), tokenTransfers[i].amount),\"Not ERC721 Owner\");\n\t\t\t}else{\n\t\t\t\trequire(poolToken.balanceOf(_msgSender(),uint256(uint160(tokenTransfers[i].token)))>=tokenTransfers[i].amount,\"Insufficient Token\");\n\t\t\t\trequire(TransferHelper.balanceOf(tokenTransfers[i].token,address(this))>=tokenTransfers[i].amount,\"Insufficient pool Token\");\n\t\t\t}\n\t\t}\n\t\temit WithdrawalRequested(\n\t\t\t_msgSender(), tokenTransfers\n\t\t);\t\n\t}\n\n\tfunction action(Action[] calldata actions) external override{\n\t\trequire(actions.length>0,\"0-len args\");\n\t\trequire(actions.length<actionLengthLimit,\"Action limit\");\n\t\temit DepositsOrActionsTriggered(\n\t\t\t_msgSender(), (new TokenTransfer[](0)), actions\n\t\t);\t\n\t}\n\n\tfunction balanceOf(address clientAddress, uint tokenId) external view override returns (uint balance){\n\t\tbalance = poolToken.balanceOf(clientAddress,tokenId);\n\t}\n\n\tfunction priceIndex(uint256 tokenId) external view returns (uint64 value){\n\t\tvalue = priceIndexes[tokenId];\n\t}\n\tfunction productVariable(uint64 id) external view returns (int64 value){\n\t\tvalue = productVariables[id];\n\t}\n\n\t/**\n\t * @dev serverTransferFunds only transfers external tokens out, does not check nor update internal balance\n\t */\n\tfunction serverTransferFunds(address clientAddress, TokenTransfer[] calldata tokenTransfers) onlyOwner external override{\n\t\trequire(tokenTransfers.length>0,\"0-len args\");\n\t\temit Withdrawal(clientAddress,tokenTransfers);\n\t\t/* do checkings again */\n\t\tfor(uint i=0;i<tokenTransfers.length;i++){\n\t\t\tif(ERC721Validator.isERC721(tokenTransfers[i].token)){\n\t\t\t\t// require(poolToken.ifUserTokenExistsERC721(clientAddress, uint256(uint160(tokenTransfers[i].token)), tokenTransfers[i].amount),\"Not ERC721 Owner\");\n\t\t\t\tTransferHelper.safeApprove(tokenTransfers[i].token,clientAddress,tokenTransfers[i].amount);\n\t\t\t\tTransferHelper.safeTransferFromERC721(tokenTransfers[i].token,address(this),clientAddress,tokenTransfers[i].amount);\n\t\t\t}else{\n\t\t\t\t// require(poolToken.balanceOf(clientAddress,uint256(uint160(tokenTransfers[i].token)))>=tokenTransfers[i].amount,\"Insufficient Token\");\n\t\t\t\trequire(TransferHelper.balanceOf(tokenTransfers[i].token,address(this))>=tokenTransfers[i].amount,\"Insufficient pool Token\");\n\t\t\t\tTransferHelper.safeApprove(tokenTransfers[i].token,clientAddress,tokenTransfers[i].amount);\n\t\t\t\tTransferHelper.safeTransfer(tokenTransfers[i].token,clientAddress,tokenTransfers[i].amount);\n\t\t\t}\n\t\t}\n\t}\n\tfunction serverUpdateBalances(\n\t\taddress[] calldata clientAddresses, TokenUpdate[][] calldata tokenUpdates,\n\t\tPriceIndex[] calldata _priceIndexes\n\t) onlyOwner external override {\n\t\trequire(clientAddresses.length>0||tokenUpdates.length>0||_priceIndexes.length>0,\"0-len args\");\n\t\trequire(clientAddresses.length==tokenUpdates.length,\"args-len Mismatch\");\n\t\tif(_priceIndexes.length>0){\n\t\t\tfor(uint i=0;i<_priceIndexes.length;i++){\n\t\t\t\tpriceIndexes[_priceIndexes[i].key] = _priceIndexes[i].value;\n\t\t\t}\n\t\t\temit PriceIndexesUpdated(_priceIndexes);\n\t\t}\n\t\t// TODO require: make sure pool size doesnt change overalld\n\t\tfor(uint i=0;i<clientAddresses.length;i++){\n\t\t\tpoolToken.updateBalance(clientAddresses[i],tokenUpdates[i]);\n\t\t}\n\t}\n\tfunction serverUpdateProductVariables(\n\t\tProductVariable[] calldata _productVariables\n\t) onlyOwner external override {\n\t\trequire(_productVariables.length>0,\"varible length == 0\");\n\t\tfor(uint i=0;i<_productVariables.length;i++){\n\t\t\tproductVariables[_productVariables[i].key] = _productVariables[i].value;\n\t\t}\n\t\temit ProductVariablesUpdated(_productVariables);\n\t}\n\n\tfunction registerLiquidationProtocol(\n\t\tuint64 protocolId, address protocolAddress\n\t) onlyOwner external override {\n\t\trequire(protocolAddress!=address(0x0),\"protocol cannot be 0\");\n\t\t// require(liquidationProtocolAddresses[protocolId]==address(0x0),\"protocol ID dupl.\"); \n\t\tliquidationProtocolAddresses[protocolId] = protocolAddress;\n\t\temit LiquidationProtocolRegistered(protocolAddress);\n\t}\n\n\tfunction serverLiquidate(\n\t\tuint64 protocolId, ILiquidationProtocol.LiquidateParams memory lparams\n\t) onlyOwner external override {\n\t\taddress protocolAddress = liquidationProtocolAddresses[protocolId];\n\t\trequire(protocolAddress!=address(0x0),\"protocol incorrect\");\n\t\tILiquidationProtocol protocol = ILiquidationProtocol(protocolAddress);\n\t\tlparams.amountIn = protocol.getApproveAmount(lparams);\n\t\t// for aave: atoken calculation might be ahead of actual balance - amountIn should always be smaller than balance\n\t\t// uint256 balance = IERC20(lparams.tokenFrom).balanceOf(address(this));\n\t\t// if(lparams.amountIn>balance) lparams.amountIn = balance;\n        TransferHelper.safeApprove(lparams.tokenFrom, address(protocolAddress), lparams.amountIn);\n        // TransferHelper.safeTransfer(lparams.tokenFrom, address(protocolAddress), lparams.amountIn);\n        // console.log(\"lparams.amountIn\");\n        // console.log(lparams.amountIn);\n\t\tILiquidationProtocol.LiquidatedAmount[] memory amounts = protocol.swap(lparams);\n\t\t// TODO update client wallet?\n\t\temit ServerLiquidateSuccess(lparams.clientAddress,lparams.tokenFrom,lparams.amountIn,amounts);\n\t}\n\n\t// Implementing `onERC721Received` so this contract can receive custody of erc721 tokens\n\tfunction onERC721Received( address , address , uint256 , bytes calldata ) external pure override returns (bytes4) {\n    return this.onERC721Received.selector;\n\t}\n\n\tfunction serverLiquidateERC721(\n\t\tuint64 protocolId, ILiquidationProtocol.LiquidateParams memory lparams\n\t) onlyOwner external override {\n\t\taddress protocolAddress = liquidationProtocolAddresses[protocolId];\n\t\trequire(protocolAddress!=address(0x0),\"protocol incorrect\");\n\t\tILiquidationProtocol protocol = ILiquidationProtocol(protocolAddress);\n\t\tlparams.amountIn = protocol.getApproveAmount(lparams);\n    TransferHelper.safeApprove(lparams.tokenFrom, address(protocolAddress), lparams.amountIn);\n\t\tILiquidationProtocol.LiquidatedAmount[] memory amounts = protocol.swap(lparams);\n\t\t// TODO update client wallet?\n\t\temit ServerLiquidateSuccess(lparams.clientAddress,lparams.tokenFrom,lparams.amountIn,amounts);\n\t}\n}\n"
    },
    "contracts/interfaces/IInfinityPool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.12;\n\nimport \"../interfaces/ILiquidationProtocol.sol\";\n\ninterface IInfinityPool {\n\n\t/*\n\n\taction types\n\tpublic static final int SOURCE_WEB = 1;\n\tpublic static final int SOURCE_ETHERERUM = 2;\n\t\n\tpublic static final int TYPE_DEPOSIT = 1;\n\tpublic static final int TYPE_WITHDRAWL = 2;\n\tpublic static final int TYPE_WITHDRAWL_FAST = 3;\n\tpublic static final int TYPE_TRANSFER = 4;\n\t\n\tpublic static final int TYPE_BORROW = 10;\n\tpublic static final int TYPE_PAYBACK = 11;\n\t\n\tpublic static final int TYPE_CREATE_EXCHANGE_LIQUIDITY_POSITION = 20;\n\tpublic static final int TYPE_UPDATE_EXCHANGE_LIQUIDITY_POSITION = 21;\n\tpublic static final int TYPE_REMOVE_EXCHANGE_LIQUIDITY_POSITION = 22;\n\tpublic static final int TYPE_EXCHANGE = 23;\n\tpublic static final int TYPE_EXCHANGE_LARGE_ORDER = 24;\n\n\t*/\n\n\tstruct TokenTransfer {\n\t\taddress token;\n\t\tuint256 amount;\n\t}\n\tstruct TokenUpdate {\n\t\tuint256 tokenId; // might be prepended with wallet type (e.g. interest bearing wallets)\n\t\tuint256 amount; // absolute value - should always be unsigned\n\t\tbool isERC721; // to avoid high gas usage from checking erc721 \n\t\tuint64 priceIndex;\n\t}\n\n\tstruct Action {\n\t\tuint256 action;\n\t\tuint256[] parameters;\n\t}\n\n\tstruct ProductVariable {\n\t\tuint64 key;\n\t\tint64 value;\n\t}\n\n\tstruct PriceIndex {\n\t\tuint256 key;\n\t\tuint64 value;\n\t}\n\n\n\tevent DepositsOrActionsTriggered(\n\t\taddress indexed sender,\n\t\tTokenTransfer[] transfers, \n\t\tAction[] actions\n\t);\n\tevent WithdrawalRequested(\n\t\taddress indexed sender,\n\t\tTokenTransfer[] transfers\n\t);\n\n\tevent ProductVariablesUpdated(\n\t\tProductVariable[] variables\n\t);\n\tevent PriceIndexesUpdated(\n\t\tPriceIndex[] priceIndexes\n\t);\n\n\tevent LiquidationProtocolRegistered(\n\t\taddress indexed protocolAddress\n\t);\n\n\tevent ServerLiquidateSuccess(\n\t\taddress indexed clientAddress,\n\t\taddress tokenFrom,\n\t\tuint256 amountIn,\n\t\tILiquidationProtocol.LiquidatedAmount[] amounts\n\t);\n\t\n\tfunction version() external pure returns(uint v);\n\n\tfunction deposit(\n\t\tTokenTransfer[] memory tokenTranfers,\n\t\tAction[] calldata actions\n\t) external payable;\n\n\tfunction requestWithdraw(TokenTransfer[] calldata tokenTranfers) external;\n\n\tfunction action(Action[] calldata actions) external;\n\n\tfunction balanceOf(address clientAddress, uint tokenId) external view returns (uint);\n\n\tfunction productVariable(uint64 id) external view returns (int64);\n\n\tfunction priceIndex(uint256 tokenId) external view returns (uint64);\n\n\tfunction serverTransferFunds(address clientAddress, TokenTransfer[] calldata tokenTranfers) external;\n\n\tfunction serverUpdateBalances(\n\t\taddress[] calldata clientAddresses, TokenUpdate[][] calldata tokenUpdates, \n\t\tPriceIndex[] calldata priceIndexes\n\t) external;\n\n\tfunction serverUpdateProductVariables(\n\t\tProductVariable[] calldata productVariables\n\t) external;\n\n\tfunction registerLiquidationProtocol(\n\t\tuint64 protocolId, address protocolAddress\n\t) external;\n\n\tfunction serverLiquidate(\n\t\tuint64 protocolId, ILiquidationProtocol.LiquidateParams memory lparams\n\t) external;\n\n\tfunction serverLiquidateERC721(\n\t\tuint64 protocolId, ILiquidationProtocol.LiquidateParams memory lparams\n\t) external;\n\n\t// function serverTransferERC721(address client, address token, uint256 tokenId) external;\n\n\t// function bridgeTransfer();\n\n\tevent Withdrawal(\n\t\taddress indexed clientAddress,\n\t\tTokenTransfer[] tokenTranfers\n\t);\n\t\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\nimport \"./IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n"
    },
    "contracts/interfaces/IInfinityToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"./IInfinityPool.sol\";\n\ninterface IInfinityToken is IERC1155 {\n\n    function setPool(address _poolAddr) external;\n\n    function priceIndexOf(address clientAddress, uint256 tokenId) external returns(uint64);\n\n    function deposit(\n    \taddress clientAddress, \n    \tuint[] memory _coinIds, \n    \tuint[] memory _amounts\n    ) external;\n\n    function withdraw(\n    \taddress clientAddress, \n    \tuint[] memory _coinIds, \n    \tuint[] memory _amounts\n\t) external;\n\n    function transfer(\n        address from,\n        address to,\n    \tuint[] memory _coinIds, \n        uint[] memory _amounts\n    ) external;\n\n    function moveProducts(\n        address clientAddress,\n    \tuint[] memory _mintIds, \n        uint[] memory _mintAmounts,\n    \tuint[] memory _burnIds, \n        uint[] memory _burnAmounts\n    ) external ;\n\n    function updateBalance(\n\t\taddress clientAddress, IInfinityPool.TokenUpdate[] calldata tokenUpdates\n    ) external;\n\n    function ifUserTokenExistsERC721(\n        address account,\n    \tuint tokenAddress, \n    \tuint tokenId\n    ) external returns(bool exists);\n    // function depositERC721(\n    // \taddress account, \n    // \tuint tokenAddress, \n    // \tuint tokenId\n    // ) external;\n    // function withdrawERC721(\n    // \taddress account, \n    // \tuint tokenAddress, \n    // \tuint tokenId\n\t// ) external;\n    // function transferERC721(\n    //     address from,\n    //     address to,\n    // \tuint tokenAddress, \n    //     uint tokenId\n    // ) external;\n\n\t\n}\n"
    },
    "contracts/interfaces/ILiquidationProtocol.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.12;\n\ninterface ILiquidationProtocol {\n\n\tstruct LiquidateParams {\n\t\taddress clientAddress;\n\t\taddress tokenFrom;\n\t\taddress tokenTo;\n\t\tuint256 amountIn; // for ERC721: amountIn is tokenId\n\t\tuint24 poolFee;\n\t}\n\n\tstruct LiquidatedAmount {\n\t\taddress token;\n\t\tuint256 amount;\n\t}\n\t\n\tfunction swap(\n\t\tLiquidateParams memory lparams\n\t) external returns (LiquidatedAmount[] memory amounts);\n\t\n\tfunction getApproveAmount(\n\t\tLiquidateParams memory lparams\n\t) external returns (uint256 amountOut);\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.12;\n\nlibrary TransferHelper {\n    function safeApprove( address token, address to, uint256 value ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require( success && (data.length == 0 || abi.decode(data, (bool))), 'approve failed' );\n    }\n\n    function safeTransferFrom( address token, address from, address to, uint256 value ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require( success && (data.length == 0 || abi.decode(data, (bool))), 'transferFrom failed' );\n    }\n\n    function safeTransfer( address token, address to, uint256 value ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require( success && (data.length == 0 || abi.decode(data, (bool))), 'transfer failed' );\n    }\n\n    function safeTransferFromERC721( address token, address from, address to, uint256 tokenId ) internal {\n        // bytes4(keccak256(bytes('safeTransferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x42842e0e, from, to, tokenId));\n        require( success && (data.length == 0 || abi.decode(data, (bool))), 'erc721 safeTransferFrom failed' );\n    }\n\n    function balanceOf( address token, address account ) internal returns (uint256 balance){\n        // bytes4(keccak256(bytes('balanceOf(address)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x70a08231, account));\n        require(success,'balanceOf failed');\n        balance = abi.decode(data, (uint256));\n    }\n}"
    },
    "contracts/libraries/ERC721Validator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.12;\n\n// import \"hardhat/console.sol\";\n\nlibrary ERC721Validator {\n\n    function isERC721(address token) internal returns(bool b){\n        // bytes4(keccak256(bytes(\"supportsInterface(bytes4)\")))\n        (bool success,bytes memory data) = token.call(abi.encodeWithSelector(0x01ffc9a7,bytes4(0x80ac58cd))); // ERC721ID\n        if(success && data.length > 0 && abi.decode(data, (bool))){\n            (success,data) = token.call(abi.encodeWithSelector(0x01ffc9a7,bytes4(0x5b5e139f))); // ERC721MetadataID\n            /**\n             * DEV no need to check ERC721Enumerable since it's OPTIONAL (only for token to be able to publish its full list of NFTs - see:\n             * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md#specification\n             */\n            // if(success && data.length > 0 && abi.decode(data, (bool))){\n                // (success,data) = token.call(abi.encodeWithSelector(0x01ffc9a7,bytes4(0x780e9d63))); // ERC721EnumerableID\n                b = success && data.length > 0 && abi.decode(data, (bool));\n                // if(b) console.log(\"isERC721 ERC721EnumerableID\");\n            // }\n        }\n        // console.log(token); console.log(b);\n    }\n\n    function isERC721Owner(address token, address account, uint256 tokenId) internal returns(bool result){\n        // bytes4(keccak256(bytes('ownerOf(uint256)')));\n        (, bytes memory data) = token.call(abi.encodeWithSelector(0x6352211e, tokenId));\n        address owner = abi.decode(data, (address));\n        result = owner==account;\n    }\n\n}"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @dev contract of the ERC20 standard as defined in the EIP with extended functions.\n */\nabstract contract IERC20Extended is IERC20 {\n    function decimals() public virtual view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}