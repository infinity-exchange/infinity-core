{
  "address": "0x0a90341041c9Ed8c2db4845000c49b31Cc3624E5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addrProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "clientAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenFrom",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenTo",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "poolFee",
              "type": "uint24"
            }
          ],
          "internalType": "struct ILiquidationProtocol.LiquidateParams",
          "name": "lparams",
          "type": "tuple"
        }
      ],
      "name": "getApproveAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "clientAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenFrom",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenTo",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "poolFee",
              "type": "uint24"
            }
          ],
          "internalType": "struct ILiquidationProtocol.LiquidateParams",
          "name": "lparams",
          "type": "tuple"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILiquidationProtocol.LiquidatedAmount[]",
          "name": "amounts",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x50c5a4987a5509f289a54879091e052815c157d0d3cecadb10bdc22010b2e1c1",
  "receipt": {
    "to": null,
    "from": "0x0858e5aCF759EC6e071f7CedC177f4085c722b8B",
    "contractAddress": "0x0a90341041c9Ed8c2db4845000c49b31Cc3624E5",
    "transactionIndex": 122,
    "gasUsed": "2041448",
    "logsBloom": "0x00000000000000000000000000000020000000000000000000800000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000001000000000000000000000000000000000010020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000008001000000000000000000000000040040000000000000000000000000000000040000000000000000000000000000000000000000000000800000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1fecfdb409a6c6bcb71f8c816c0bb091f06d99e5609bd7a82e4576b02f5f9114",
    "transactionHash": "0x50c5a4987a5509f289a54879091e052815c157d0d3cecadb10bdc22010b2e1c1",
    "logs": [
      {
        "transactionIndex": 122,
        "blockNumber": 7507687,
        "transactionHash": "0x50c5a4987a5509f289a54879091e052815c157d0d3cecadb10bdc22010b2e1c1",
        "address": "0x0a90341041c9Ed8c2db4845000c49b31Cc3624E5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000858e5acf759ec6e071f7cedc177f4085c722b8b"
        ],
        "data": "0x",
        "logIndex": 241,
        "blockHash": "0x1fecfdb409a6c6bcb71f8c816c0bb091f06d99e5609bd7a82e4576b02f5f9114"
      },
      {
        "transactionIndex": 122,
        "blockNumber": 7507687,
        "transactionHash": "0x50c5a4987a5509f289a54879091e052815c157d0d3cecadb10bdc22010b2e1c1",
        "address": "0x0a90341041c9Ed8c2db4845000c49b31Cc3624E5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000858e5acf759ec6e071f7cedc177f4085c722b8b",
          "0x000000000000000000000000f2d8e40a7761cf301aa5babc436d77dfd456d8dc"
        ],
        "data": "0x",
        "logIndex": 242,
        "blockHash": "0x1fecfdb409a6c6bcb71f8c816c0bb091f06d99e5609bd7a82e4576b02f5f9114"
      }
    ],
    "blockNumber": 7507687,
    "cumulativeGasUsed": "22681900",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0xF2d8E40a7761cF301AA5BABC436d77dfD456d8dc"
  ],
  "numDeployments": 2,
  "solcInputHash": "7bc9459bb57cd8cc0eb8f51073ab0ff6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addrProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"internalType\":\"struct ILiquidationProtocol.LiquidateParams\",\"name\":\"lparams\",\"type\":\"tuple\"}],\"name\":\"getApproveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"internalType\":\"struct ILiquidationProtocol.LiquidateParams\",\"name\":\"lparams\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidationProtocol.LiquidatedAmount[]\",\"name\":\"amounts\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"swap((address,address,address,uint256,uint24))\":{\"details\":\"The calling address must approve this contract to spend at least `amountIn` worth of its DAI for this function to succeed.\",\"params\":{\"lparams\":\"check ILiquidationProtocol.LiquidateParams for params strut.\"},\"returns\":{\"amounts\":\"The amount of target token received.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swap((address,address,address,uint256,uint24))\":{\"notice\":\"swap swaps token on uniswap v3. calls `exactInputSingle` in the swap router.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidationCurve.sol\":\"LiquidationCurve\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/LiquidationCurve.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/ILiquidationProtocol.sol\\\";\\nimport \\\"./access/Ownable.sol\\\";\\n// import \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract LiquidationCurve is ILiquidationProtocol, Ownable {\\n\\n\\n    address private _addrProvider; // should be immutable at 0x0000000022D53366457F9d5E68Ec105046FC4383\\n    \\n    constructor(address addrProvider,address poolAddress) {\\n        _addrProvider = addrProvider;\\n        Ownable._setOwner(poolAddress);\\n    }\\n    \\n    /// @notice swap swaps token on uniswap v3.\\n    /// calls `exactInputSingle` in the swap router.\\n    /// @dev The calling address must approve this contract to spend at least `amountIn` worth of its DAI for this function to succeed.\\n    /// @param lparams check ILiquidationProtocol.LiquidateParams for params strut.\\n    /// @return amounts The amount of target token received.\\n\\tfunction swap(\\n\\t\\tLiquidateParams memory lparams\\n\\t) external override onlyOwner returns (LiquidatedAmount[] memory amounts){\\n        (bool success,bytes memory data) = _addrProvider.call(abi.encodeWithSelector(0xa262904b)); // bytes4(keccak256(bytes(\\\"get_registry()\\\")))\\n        address registry = abi.decode(data,(address));\\n        require(success&&registry!=address(0x00),\\\"registry not found\\\");\\n        (success,data) = registry.call(abi.encodeWithSelector(0xbdf475c3,lparams.tokenFrom)); // bytes4(keccak256(bytes(\\\"get_pool_from_lp_token(address)\\\")))\\n        address pool = abi.decode(data,(address));\\n        require(success&&pool!=address(0x00),\\\"LP token pool not found\\\");\\n        // console.log(\\\"pool\\\");\\n        // console.log(pool);\\n        (success,data) = registry.call(abi.encodeWithSelector(0x940494f1,pool)); // bytes4(keccak256(bytes(\\\"get_n_coins(address)\\\")))\\n        uint256[] memory minAmounts = new uint256[](abi.decode(data,(uint256[2]))[1]); for(uint256 i=0;i<minAmounts.length;i++){minAmounts[i]=0;}\\n        // console.log(\\\"coinCounts\\\");\\n        // console.log(coinCounts[0]);\\n        // console.log(coinCounts[1]);\\n        require(success,\\\"get_n_coins(address) failed\\\");\\n        (success,data) = registry.call(abi.encodeWithSelector(0xa77576ef,pool)); // bytes4(keccak256(bytes(\\\"get_underlying_coins(address)\\\")))\\n        address[8] memory coins = abi.decode(data,(address[8]));\\n        require(success&&coins.length>0,\\\"pool coins not found\\\");\\n        int256 coinIdx = -1;\\n        for(uint256 i=0;i<coins.length;i++){\\n            // console.log(coins[i]);\\n            if(coins[i]==lparams.tokenTo){\\n                coinIdx = int256(i);\\n            }\\n        }\\n        require(coinIdx!=-1,\\\"tokenTo is not underlying asset\\\");\\n        (success,data) = pool.call(abi.encodeWithSelector(bytes4(keccak256(bytes(\\\"calc_withdraw_one_coin(uint256,uint256)\\\"))),lparams.amountIn,uint256(coinIdx))); // bytes4(keccak256(bytes(\\\"calc_withdraw_one_coin(uint256,uint256)\\\")))\\n        if(!(success&&data.length>0)){ // retry with different signature cause curve can't keep their signatures straight\\n            (success,data) = pool.call(abi.encodeWithSelector(bytes4(keccak256(bytes(\\\"calc_withdraw_one_coin(uint256,int128)\\\"))),lparams.amountIn,int128(coinIdx))); // bytes4(keccak256(bytes(\\\"calc_withdraw_one_coin(uint256,int128)\\\")))\\n        }\\n        // console.logBytes(data);\\n        require(success&&data.length>0,\\\"pool withdraw calc failed\\\");\\n        (uint256 amountOut) = abi.decode(data,(uint256));\\n        // console.log(\\\"calc_withdraw_one_coin: amountOut\\\");\\n        // console.log(amountOut);\\n\\n        // msg.sender must approve this contract - should always be InfinityPool\\n        TransferHelper.safeTransferFrom(lparams.tokenFrom, msg.sender, address(this), lparams.amountIn);\\n        \\n        (success,data) = pool.call(abi.encodeWithSelector(bytes4(keccak256(bytes(\\\"remove_liquidity_one_coin(uint256,uint256,uint256)\\\"))),lparams.amountIn,coinIdx,amountOut)); // bytes4(keccak256(bytes(\\\"remove_liquidity_one_coin(uint256,int128,uint256)\\\")))\\n        if(!success){ // retry with different signature cause curve can't keep their signatures straight\\n            // uint128 call DOESNT throw error and cannot be checked by success==false\\n            (success,data) = pool.call(abi.encodeWithSelector(bytes4(keccak256(bytes(\\\"remove_liquidity_one_coin(uint256,int128,uint256)\\\"))),lparams.amountIn,coinIdx,amountOut));\\n        }\\n        require(success,\\\"pool withdraw failed\\\");\\n        // NOTE: remove_liquidity fails - 3pool doesnt even return amount withdrawn so it's very inefficient to use anyways\\n        // (success,data) = pool.call(abi.encodeWithSelector(bytes4(keccak256(bytes(string.concat(\\\"remove_liquidity(uint256,uint256[\\\",Strings.toString(minAmounts.length),\\\"])\\\")))),lparams.amountIn,minAmounts)); // bytes4(keccak256(bytes(\\\"remove_liquidity(uint256,uint256[])\\\")))\\n        // require(success,\\\"remove_liquidity failed\\\");\\n        // for(uint256 i=0;i<coins.length;i++){\\n        //     if(coins[i]!=address(0x00)){\\n        //         uint256 balance = TransferHelper.balanceOf(lparams.tokenTo, coins[i]);\\n        //         console.log(\\\"remove_liquidity: coin balance\\\");\\n        //         console.log(coins[i]);\\n        //         console.log(balance);\\n        //         TransferHelper.safeApprove(coins[i], address(msg.sender), balance);\\n        //         TransferHelper.safeTransfer(coins[i], address(msg.sender), balance);\\n        //     }\\n        // }\\n\\n        TransferHelper.safeApprove(lparams.tokenTo, address(msg.sender), amountOut);\\n        TransferHelper.safeTransfer(lparams.tokenTo, address(msg.sender), amountOut);\\n\\n        amounts = new LiquidatedAmount[](1);\\n        amounts[0] = LiquidatedAmount(lparams.tokenTo,amountOut);\\n\\t}\\n\\n\\tfunction getApproveAmount(LiquidateParams memory lparams) pure external override returns (uint256 amountOut) { amountOut = lparams.amountIn; }\\n\\n}\\n\",\"keccak256\":\"0x61ed52a047f535e015d680cb2c4ef3f4270c683d1a66b49b3fbf44f46e94772c\",\"license\":\"UNLICENSED\"},\"contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x0bc0f717aa9bf5d9996cdd6930d7b86bc10c000318330249e5d57e61350694f5\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @dev contract of the ERC20 standard as defined in the EIP with extended functions.\\n */\\nabstract contract IERC20Extended is IERC20 {\\n    function decimals() public virtual view returns (uint8);\\n}\\n\",\"keccak256\":\"0x9a79b63440673007eb5f814354216eb05a8d0b3c85f8ff438ff0dceddb9fac31\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidationProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\ninterface ILiquidationProtocol {\\n\\n\\tstruct LiquidateParams {\\n\\t\\taddress clientAddress;\\n\\t\\taddress tokenFrom;\\n\\t\\taddress tokenTo;\\n\\t\\tuint256 amountIn; // for ERC721: amountIn is tokenId\\n\\t\\tuint24 poolFee;\\n\\t}\\n\\n\\tstruct LiquidatedAmount {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\t\\n\\tfunction swap(\\n\\t\\tLiquidateParams memory lparams\\n\\t) external returns (LiquidatedAmount[] memory amounts);\\n\\t\\n\\tfunction getApproveAmount(\\n\\t\\tLiquidateParams memory lparams\\n\\t) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x501ba4987b4587c629638819a4685451ccf2bf3dad7e8c13b6aa2b5c7cfc5a55\",\"license\":\"UNLICENSED\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nlibrary TransferHelper {\\n    function safeApprove( address token, address to, uint256 value ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require( success && (data.length == 0 || abi.decode(data, (bool))), 'approve failed' );\\n    }\\n\\n    function safeTransferFrom( address token, address from, address to, uint256 value ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require( success && (data.length == 0 || abi.decode(data, (bool))), 'transferFrom failed' );\\n    }\\n\\n    function safeTransfer( address token, address to, uint256 value ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require( success && (data.length == 0 || abi.decode(data, (bool))), 'transfer failed' );\\n    }\\n\\n    function safeTransferFromERC721( address token, address from, address to, uint256 tokenId ) internal {\\n        // bytes4(keccak256(bytes('safeTransferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x42842e0e, from, to, tokenId));\\n        require( success && (data.length == 0 || abi.decode(data, (bool))), 'erc721 safeTransferFrom failed' );\\n    }\\n\\n    function balanceOf( address token, address account ) internal returns (uint256 balance){\\n        // bytes4(keccak256(bytes('balanceOf(address)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x70a08231, account));\\n        require(success,'balanceOf failed');\\n        balance = abi.decode(data, (uint256));\\n    }\\n}\",\"keccak256\":\"0x68697fd31366b389299c51eb23d12c6e6372c0b289616228ae9b70c660126154\",\"license\":\"UNLICENSED\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xb4a78da2cdb3e2e0e1ae8fe83fd8e477fc06911dafc170779714c3a0b5cff20e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "swap((address,address,address,uint256,uint24))": {
        "details": "The calling address must approve this contract to spend at least `amountIn` worth of its DAI for this function to succeed.",
        "params": {
          "lparams": "check ILiquidationProtocol.LiquidateParams for params strut."
        },
        "returns": {
          "amounts": "The amount of target token received."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swap((address,address,address,uint256,uint24))": {
        "notice": "swap swaps token on uniswap v3. calls `exactInputSingle` in the swap router."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6936,
        "contract": "contracts/LiquidationCurve.sol:LiquidationCurve",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6044,
        "contract": "contracts/LiquidationCurve.sol:LiquidationCurve",
        "label": "_addrProvider",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}