{
  "address": "0xe04DA29D3fF33622c2B5D6d4E1b9084e9f28e17A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "UpdateBatch",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_coinIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAddress",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ifUserTokenExistsERC721",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_mintIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_mintAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_burnIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_burnAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "moveProducts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IInfinityPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "priceIndexOf",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "priceIndex",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddr",
          "type": "address"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_coinIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isERC721",
              "type": "bool"
            },
            {
              "internalType": "uint64",
              "name": "priceIndex",
              "type": "uint64"
            }
          ],
          "internalType": "struct IInfinityPool.TokenUpdate[]",
          "name": "tokenUpdates",
          "type": "tuple[]"
        }
      ],
      "name": "updateBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_coinIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcaf7b2c8e42b63edfb0653fdfeb5d53d191e59b7b428c9a011c56f866c54bb0e",
  "receipt": {
    "to": null,
    "from": "0x0858e5aCF759EC6e071f7CedC177f4085c722b8B",
    "contractAddress": "0xe04DA29D3fF33622c2B5D6d4E1b9084e9f28e17A",
    "transactionIndex": 26,
    "gasUsed": "5323898",
    "logsBloom": "0x
    "blockHash": "0x42f6c693ad641c346a28a97a231f85974b65d281a9a664dd6044ac9261c7e0b4",
    "transactionHash": "0xcaf7b2c8e42b63edfb0653fdfeb5d53d191e59b7b428c9a011c56f866c54bb0e",
    "logs": [],
    "blockNumber": 7761156,
    "cumulativeGasUsed": "18870844",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8f56092ba42d5e0041037af8551428a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"UpdateBatch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_coinIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ifUserTokenExistsERC721\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_mintIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_mintAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_burnIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_burnAmounts\",\"type\":\"uint256[]\"}],\"name\":\"moveProducts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IInfinityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"priceIndexOf\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"priceIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_coinIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"priceIndex\",\"type\":\"uint64\"}],\"internalType\":\"struct IInfinityPool.TokenUpdate[]\",\"name\":\"tokenUpdates\",\"type\":\"tuple[]\"}],\"name\":\"updateBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_coinIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setPool(address)\":{\"details\":\"set pool contract for permission check, and interest bearing balance calculation\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InfinityToken.sol\":\"InfinityToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/InfinityToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./libraries/ERC721Validator.sol\\\";\\nimport \\\"./interfaces/IInfinityToken.sol\\\";\\nimport \\\"./InfinityTokenERC1155.sol\\\";\\nimport \\\"./InfinityTokenERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n// import \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract InfinityToken is IInfinityToken, Initializable, InfinityTokenERC1155, InfinityTokenERC721 {\\n    using Address for address;\\n\\n\\tfunction initialize() public initializer{\\n        _initializeInfinityTokenERC1155(\\\"https://infinity.exchange/t/{tokenAddress}.json\\\");\\n        _initializeInfinityTokenERC721();\\n\\t\\t__Ownable_init();\\n    }\\n\\n    /**\\n     * @dev set pool contract for permission check, and interest bearing balance calculation\\n     */\\n    function setPool(address _poolAddr) external override onlyOwner {\\n        pool = IInfinityPool(_poolAddr);\\n    }\\n\\n    function priceIndexOf(address clientAddress, uint256 tokenId) external override view returns(uint64 priceIndex){\\n        priceIndex = _balances[tokenId][clientAddress].priceIndex;\\n    }\\n\\n    function deposit(\\n    \\taddress clientAddress, \\n    \\tuint[] memory _coinIds, \\n    \\tuint[] memory _amounts\\n    ) external override onlyPoolOrOwner {\\n        for(uint i=0;i<_coinIds.length;i++){\\n            uint tokenId = _coinIds[i];\\n\\t\\t\\trequire(!ERC721Validator.isERC721(address(uint160(tokenId))),\\\"ERC721 not accepted\\\");\\n        }\\n        _mintBatch(clientAddress, _coinIds, _amounts, \\\"\\\");\\n    }\\n    function withdraw(\\n    \\taddress clientAddress, \\n    \\tuint[] memory _coinIds, \\n    \\tuint[] memory _amounts\\n\\t) external override onlyPoolOrOwner {\\n        uint256[] memory _tokenIds = new uint256[](_coinIds.length);\\n        uint256[] memory _tokenAmounts = new uint256[](_amounts.length);\\n        for(uint i=0;i<_tokenIds.length;i++){\\n            uint tokenId = _coinIds[i];\\n            uint tokenAmount = _amounts[i];\\n\\t\\t\\tif(ERC721Validator.isERC721(address(uint160(tokenId)))){\\n                _withdrawERC721(clientAddress,tokenId,tokenAmount);\\n\\t\\t\\t}else{\\n                _tokenIds[i] = tokenId;\\n                _tokenAmounts[i] = tokenAmount;\\n            }\\n        }\\n        _burnBatch(clientAddress, _tokenIds, _tokenAmounts);\\n    }\\n    function transfer(\\n        address from,\\n        address to,\\n    \\tuint[] memory _coinIds, \\n        uint[] memory _amounts\\n    ) external override onlyPoolOrOwner {\\n        for(uint i=0;i<_coinIds.length;i++){\\n\\t\\t\\trequire(!ERC721Validator.isERC721(address(uint160(_coinIds[i]))),\\\"cannot transfer ERC721 token\\\");\\n        }\\n        _safeBatchTransferFrom(from, to, _coinIds, _amounts, \\\"\\\");\\n    }\\n    \\n    function moveProducts(\\n        address clientAddress,\\n    \\tuint[] memory _mintIds, \\n        uint[] memory _mintAmounts,\\n    \\tuint[] memory _burnIds, \\n        uint[] memory _burnAmounts\\n    ) external override onlyPoolOrOwner {\\n        for(uint i=0;i<_mintIds.length;i++){\\n\\t\\t\\trequire(!ERC721Validator.isERC721(address(uint160(_mintIds[i]))),\\\"cannot transfer ERC721 token\\\");\\n        }\\n        for(uint i=0;i<_burnIds.length;i++){\\n\\t\\t\\trequire(!ERC721Validator.isERC721(address(uint160(_burnIds[i]))),\\\"cannot transfer ERC721 token\\\");\\n        }\\n        _mintBatch(clientAddress, _mintIds, _mintAmounts, \\\"\\\");\\n        _burnBatch(clientAddress, _burnIds, _burnAmounts);\\n    }\\n\\n    function updateBalance(\\n\\t\\taddress clientAddress, IInfinityPool.TokenUpdate[] calldata tokenUpdates\\n    ) external override onlyPoolOrOwner {\\n        require(tokenUpdates.length>0,\\\"0-len args\\\");\\n        uint256[] memory _tokenAmounts = new uint256[](tokenUpdates.length);\\n        uint256[] memory _tokenIds = new uint256[](tokenUpdates.length);\\n        uint64[] memory _tokenPriceIndexes = new uint64[](tokenUpdates.length);\\n        for(uint j=0;j<tokenUpdates.length;j++){\\n            uint tokenId = tokenUpdates[j].tokenId;\\n            if(tokenUpdates[j].isERC721){\\n\\t\\t\\t// if(ERC721Validator.isERC721(address(uint160(tokenId)))){\\n                _depositERC721(clientAddress, tokenUpdates[j].tokenId, tokenUpdates[j].amount);\\n\\t\\t\\t}else{\\n                _tokenIds[j] = tokenId;\\n                _tokenAmounts[j] = tokenUpdates[j].amount;\\n                _tokenPriceIndexes[j] = tokenUpdates[j].priceIndex;\\n            }\\n        }\\n        _updateBatch(clientAddress,_tokenIds,_tokenAmounts,_tokenPriceIndexes,\\\"\\\");\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override onlyPoolOrOwner {\\n        // empty implementation - will check onlyPoolOrOwner\\n    }\\n\\n    // NFT balances = different balance\\n    function ifUserTokenExistsERC721(\\n        address account,\\n    \\tuint tokenAddress, \\n    \\tuint tokenId\\n    ) external view override returns(bool exists) {\\n        exists = _ifUserTokenExistsERC721(account,tokenAddress,tokenId);\\n    }\\n    function _ifUserTokenExistsERC721(\\n        address account,\\n    \\tuint tokenAddress, \\n    \\tuint tokenId\\n    ) internal view returns(bool exists) {\\n        exists = _balancesNFT[tokenAddress][tokenId]==account;\\n    }\\n    function _depositERC721(\\n    \\taddress account, \\n    \\tuint tokenAddress, \\n    \\tuint tokenId\\n    ) internal onlyPoolOrOwner {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(_balancesNFT[tokenAddress][tokenId]==address(0), \\\"ERC721 already owned by another user\\\");\\n        address operator = _msgSender();\\n        _balances[tokenAddress][account].amount += 1; // standard balance update\\n        _balancesNFT[tokenAddress][tokenId] = account; // save tokenId to user\\n        emit TransferSingle(operator, address(0), account, tokenAddress, tokenId);\\n        __doSafeTransferAcceptanceCheck(operator, address(0), account, tokenAddress, tokenId, \\\"\\\");\\n    }\\n    function _withdrawERC721(\\n    \\taddress account, \\n    \\tuint tokenAddress, \\n    \\tuint tokenId\\n\\t) internal onlyPoolOrOwner {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        address operator = _msgSender();\\n        require(_balances[tokenAddress][account].amount > 0, \\\"ERC1155: burn tokenId exceeds balance\\\");\\n        require(_balancesNFT[tokenAddress][tokenId]==address(account), \\\"ERC721: already belongs to another address\\\");\\n        _balances[tokenAddress][account].amount -= 1; // standard balance update\\n        _balancesNFT[tokenAddress][tokenId] = address(0);\\n        emit TransferSingle(operator, account, address(0), tokenAddress, tokenId);\\n    }\\n    // function transferERC721(\\n    //     address from,\\n    //     address to,\\n    // \\tuint tokenAddress, \\n    //     uint tokenId\\n    // ) external override onlyPoolOrOwner {\\n    //     require(\\n    //         from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n    //         \\\"ERC1155: caller is not owner nor approved\\\"\\n    //     );\\n    //     require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n    //     address operator = _msgSender();\\n    //     require(_balances[tokenAddress][from].amount > 0, \\\"ERC1155: insufficient balance for transfer\\\");\\n    //     require(_balancesNFT[tokenAddress][tokenId]==from, \\\"ERC721: does not belong to from address\\\");\\n    //     _balances[tokenAddress][from].amount -= 1;\\n    //     _balances[tokenAddress][to].amount += 1;\\n    //     _balancesNFT[tokenAddress][tokenId] = to;\\n    //     emit TransferSingle(operator, from, to, tokenAddress, tokenId);\\n    //     __doSafeTransferAcceptanceCheck(operator, from, to, tokenAddress, tokenId, \\\"\\\");\\n    // }\\n\\n    // inherited from ERC1155 private function\\n    function __doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenAddress,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, tokenAddress, tokenId, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x79d8ee17463b5670344cdd5ba71055676f5be9595c3b63a3a178ba9bfd795271\",\"license\":\"UNLICENSED\"},\"contracts/InfinityTokenERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IInfinityPool.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @dev Implementation of ERC1155 with modified _balances structure\\n */\\ncontract InfinityTokenERC1155 is ERC165, IERC1155, IERC1155MetadataURI, ContextUpgradeable, OwnableUpgradeable {\\n    using Address for address;\\n\\n    IInfinityPool public pool; // pool reference needed for interest bearing balance\\n\\n    modifier onlyPoolOrOwner() {\\n        require(address(pool) == _msgSender()||owner() == _msgSender(), \\\"caller is not pool\\\");\\n        _;\\n    }\\n\\n    struct WalletContent {\\n        uint256 amount;         // acts as ERC721 tokenId for ERC721 token addresses\\n        uint64 priceIndex;      \\n    }\\n    // Mapping from token ID to account balances: token->wallet->walletContent\\n    mapping(uint256 => mapping(address => WalletContent)) internal _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function _initializeInfinityTokenERC1155(string memory uri_) internal {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        bool isInterestBearing = id>type(uint160).max;\\n// console.log('isInterestBearing'); console.log(isInterestBearing);\\n        if(isInterestBearing){\\n            uint64 poolPriceIndex = pool.priceIndex(id);\\n            return _balances[id][account].amount * (poolPriceIndex - _balances[id][account].priceIndex + 10000000000000) / 10000000000000;\\n        }else{\\n            return _balances[id][account].amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from].amount;\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from].amount = fromBalance - amount;\\n        }\\n        _balances[id][to].amount += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from].amount;\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from].amount = fromBalance - amount;\\n            }\\n            _balances[id][to].amount += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account].amount += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to].amount += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account].amount;\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account].amount = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account].amount;\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account].amount = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Similar to TransferBatch but with *absolute* values instead of delta, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event UpdateBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    function _updateBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        uint64[] memory priceIndexes,\\n        bytes memory data\\n    ) internal {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(ids.length == priceIndexes.length,\\\"ERC1155: ids and priceIndexes len mismatch\\\");\\n        address operator = _msgSender();\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to].amount = amounts[i];\\n            if(priceIndexes[i]!=0) _balances[ids[i]][to].priceIndex = priceIndexes[i];\\n        }\\n        emit UpdateBatch(operator, address(0), to, ids, amounts);\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xa027b805dfe014720aeb31334ff4e2ec843562c2fda8397b3518141fa510301d\",\"license\":\"MIT\"},\"contracts/InfinityTokenERC721.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract InfinityTokenERC721 {\\n\\n    // ERC721 mapping: token->tokenId->wallet - we dont care about the token details\\n    mapping(uint => mapping(uint => address)) internal _balancesNFT;\\n\\n    function _initializeInfinityTokenERC721() internal{\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb5afc7d505d6246ced6dcdcbd2f820ef5c5c88de30b36ab20891098afd6bfa2\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IInfinityPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"../interfaces/ILiquidationProtocol.sol\\\";\\n\\ninterface IInfinityPool {\\n\\n\\t/*\\n\\n\\taction types\\n\\tpublic static final int SOURCE_WEB = 1;\\n\\tpublic static final int SOURCE_ETHERERUM = 2;\\n\\t\\n\\tpublic static final int TYPE_DEPOSIT = 1;\\n\\tpublic static final int TYPE_WITHDRAWL = 2;\\n\\tpublic static final int TYPE_WITHDRAWL_FAST = 3;\\n\\tpublic static final int TYPE_TRANSFER = 4;\\n\\t\\n\\tpublic static final int TYPE_BORROW = 10;\\n\\tpublic static final int TYPE_PAYBACK = 11;\\n\\t\\n\\tpublic static final int TYPE_CREATE_EXCHANGE_LIQUIDITY_POSITION = 20;\\n\\tpublic static final int TYPE_UPDATE_EXCHANGE_LIQUIDITY_POSITION = 21;\\n\\tpublic static final int TYPE_REMOVE_EXCHANGE_LIQUIDITY_POSITION = 22;\\n\\tpublic static final int TYPE_EXCHANGE = 23;\\n\\tpublic static final int TYPE_EXCHANGE_LARGE_ORDER = 24;\\n\\n\\t*/\\n\\n\\tstruct TokenTransfer {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\tstruct TokenUpdate {\\n\\t\\tuint256 tokenId; // might be prepended with wallet type (e.g. interest bearing wallets)\\n\\t\\tuint256 amount; // absolute value - should always be unsigned\\n\\t\\tbool isERC721; // to avoid high gas usage from checking erc721 \\n\\t\\tuint64 priceIndex;\\n\\t}\\n\\n\\tstruct Action {\\n\\t\\tuint256 action;\\n\\t\\tuint256[] parameters;\\n\\t}\\n\\n\\tstruct ProductVariable {\\n\\t\\tuint64 key;\\n\\t\\tint64 value;\\n\\t}\\n\\n\\tstruct PriceIndex {\\n\\t\\tuint256 key;\\n\\t\\tuint64 value;\\n\\t}\\n\\n\\n\\tevent DepositsOrActionsTriggered(\\n\\t\\taddress indexed sender,\\n\\t\\tTokenTransfer[] transfers, \\n\\t\\tAction[] actions\\n\\t);\\n\\tevent WithdrawalRequested(\\n\\t\\taddress indexed sender,\\n\\t\\tTokenTransfer[] transfers\\n\\t);\\n\\n\\tevent ProductVariablesUpdated(\\n\\t\\tProductVariable[] variables\\n\\t);\\n\\tevent PriceIndexesUpdated(\\n\\t\\tPriceIndex[] priceIndexes\\n\\t);\\n\\n\\tevent LiquidationProtocolRegistered(\\n\\t\\taddress indexed protocolAddress\\n\\t);\\n\\n\\tevent ServerLiquidateSuccess(\\n\\t\\taddress indexed clientAddress,\\n\\t\\taddress tokenFrom,\\n\\t\\tuint256 amountIn,\\n\\t\\tILiquidationProtocol.LiquidatedAmount[] amounts\\n\\t);\\n\\t\\n\\tfunction version() external pure returns(uint v);\\n\\n\\tfunction deposit(\\n\\t\\tTokenTransfer[] memory tokenTranfers,\\n\\t\\tAction[] calldata actions\\n\\t) external payable;\\n\\n\\tfunction requestWithdraw(TokenTransfer[] calldata tokenTranfers) external;\\n\\n\\tfunction action(Action[] calldata actions) external;\\n\\n\\tfunction balanceOf(address clientAddress, uint tokenId) external view returns (uint);\\n\\n\\tfunction productVariable(uint64 id) external view returns (int64);\\n\\n\\tfunction priceIndex(uint256 tokenId) external view returns (uint64);\\n\\n\\tfunction serverTransferFunds(address clientAddress, TokenTransfer[] calldata tokenTranfers) external;\\n\\n\\tfunction serverUpdateBalances(\\n\\t\\taddress[] calldata clientAddresses, TokenUpdate[][] calldata tokenUpdates, \\n\\t\\tPriceIndex[] calldata priceIndexes\\n\\t) external;\\n\\n\\tfunction serverUpdateProductVariables(\\n\\t\\tProductVariable[] calldata productVariables\\n\\t) external;\\n\\n\\tfunction registerLiquidationProtocol(\\n\\t\\tuint64 protocolId, address protocolAddress\\n\\t) external;\\n\\n\\tfunction serverLiquidate(\\n\\t\\tuint64 protocolId, ILiquidationProtocol.LiquidateParams memory lparams\\n\\t) external;\\n\\n\\tfunction serverLiquidateERC721(\\n\\t\\tuint64 protocolId, ILiquidationProtocol.LiquidateParams memory lparams\\n\\t) external;\\n\\n\\t// function serverTransferERC721(address client, address token, uint256 tokenId) external;\\n\\n\\t// function bridgeTransfer();\\n\\n\\tevent Withdrawal(\\n\\t\\taddress indexed clientAddress,\\n\\t\\tTokenTransfer[] tokenTranfers\\n\\t);\\n\\t\\n}\\n\",\"keccak256\":\"0xe8e2b739707ba90192df35af30c949e45a9b7651a4b9471055d9f8dd9a2669df\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IInfinityToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IInfinityPool.sol\\\";\\n\\ninterface IInfinityToken is IERC1155 {\\n\\n    function setPool(address _poolAddr) external;\\n\\n    function priceIndexOf(address clientAddress, uint256 tokenId) external returns(uint64);\\n\\n    function deposit(\\n    \\taddress clientAddress, \\n    \\tuint[] memory _coinIds, \\n    \\tuint[] memory _amounts\\n    ) external;\\n\\n    function withdraw(\\n    \\taddress clientAddress, \\n    \\tuint[] memory _coinIds, \\n    \\tuint[] memory _amounts\\n\\t) external;\\n\\n    function transfer(\\n        address from,\\n        address to,\\n    \\tuint[] memory _coinIds, \\n        uint[] memory _amounts\\n    ) external;\\n\\n    function moveProducts(\\n        address clientAddress,\\n    \\tuint[] memory _mintIds, \\n        uint[] memory _mintAmounts,\\n    \\tuint[] memory _burnIds, \\n        uint[] memory _burnAmounts\\n    ) external ;\\n\\n    function updateBalance(\\n\\t\\taddress clientAddress, IInfinityPool.TokenUpdate[] calldata tokenUpdates\\n    ) external;\\n\\n    function ifUserTokenExistsERC721(\\n        address account,\\n    \\tuint tokenAddress, \\n    \\tuint tokenId\\n    ) external returns(bool exists);\\n    // function depositERC721(\\n    // \\taddress account, \\n    // \\tuint tokenAddress, \\n    // \\tuint tokenId\\n    // ) external;\\n    // function withdrawERC721(\\n    // \\taddress account, \\n    // \\tuint tokenAddress, \\n    // \\tuint tokenId\\n\\t// ) external;\\n    // function transferERC721(\\n    //     address from,\\n    //     address to,\\n    // \\tuint tokenAddress, \\n    //     uint tokenId\\n    // ) external;\\n\\n\\t\\n}\\n\",\"keccak256\":\"0x7e08d529336877c5d5ba39cf4d469b083b239e1e09e697f9509f9bad46aa6006\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ILiquidationProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\ninterface ILiquidationProtocol {\\n\\n\\tstruct LiquidateParams {\\n\\t\\taddress clientAddress;\\n\\t\\taddress tokenFrom;\\n\\t\\taddress tokenTo;\\n\\t\\tuint256 amountIn; // for ERC721: amountIn is tokenId\\n\\t\\tuint24 poolFee;\\n\\t}\\n\\n\\tstruct LiquidatedAmount {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\t\\n\\tfunction swap(\\n\\t\\tLiquidateParams memory lparams\\n\\t) external returns (LiquidatedAmount[] memory amounts);\\n\\t\\n\\tfunction getApproveAmount(\\n\\t\\tLiquidateParams memory lparams\\n\\t) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x501ba4987b4587c629638819a4685451ccf2bf3dad7e8c13b6aa2b5c7cfc5a55\",\"license\":\"UNLICENSED\"},\"contracts/libraries/ERC721Validator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.12;\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nlibrary ERC721Validator {\\n\\n    function isERC721(address token) internal returns(bool b){\\n        // bytes4(keccak256(bytes(\\\"supportsInterface(bytes4)\\\")))\\n        (bool success,bytes memory data) = token.call(abi.encodeWithSelector(0x01ffc9a7,bytes4(0x80ac58cd))); // ERC721ID\\n        if(success && data.length > 0 && abi.decode(data, (bool))){\\n            (success,data) = token.call(abi.encodeWithSelector(0x01ffc9a7,bytes4(0x5b5e139f))); // ERC721MetadataID\\n            /**\\n             * DEV no need to check ERC721Enumerable since it's OPTIONAL (only for token to be able to publish its full list of NFTs - see:\\n             * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md#specification\\n             */\\n            // if(success && data.length > 0 && abi.decode(data, (bool))){\\n                // (success,data) = token.call(abi.encodeWithSelector(0x01ffc9a7,bytes4(0x780e9d63))); // ERC721EnumerableID\\n                b = success && data.length > 0 && abi.decode(data, (bool));\\n                // if(b) console.log(\\\"isERC721 ERC721EnumerableID\\\");\\n            // }\\n        }\\n        // console.log(token); console.log(b);\\n    }\\n\\n    function isERC721Owner(address token, address account, uint256 tokenId) internal returns(bool result){\\n        // bytes4(keccak256(bytes('ownerOf(uint256)')));\\n        (, bytes memory data) = token.call(abi.encodeWithSelector(0x6352211e, tokenId));\\n        address owner = abi.decode(data, (address));\\n        result = owner==account;\\n    }\\n\\n}\",\"keccak256\":\"0x7e641d88dcaf98a17fb8fbde9dc51d0f885537e1d397e73c283d35b51e6094c1\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615fd380620000216000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80638da5cb5b116100b8578063bff849af1161007c578063bff849af1461030f578063c288cd051461033f578063dfca6a241461036f578063e985e9c51461038b578063f242432a146103bb578063f2fde38b146103d757610136565b80638da5cb5b146102815780638ed699621461029f5780639339b0a0146102bb578063a22cb465146102d7578063b93bc654146102f357610136565b80632eb2c2d6116100ff5780632eb2c2d6146102055780634437152a146102215780634e1273f41461023d578063715018a61461026d5780638129fc1c1461027757610136565b8062fdd58e1461013b57806301ffc9a71461016b5780630bdee27b1461019b5780630e89341c146101b757806316f0115b146101e7575b600080fd5b61015560048036038101906101509190613e5b565b6103f3565b6040516101629190613eaa565b60405180910390f35b61018560048036038101906101809190613f1d565b610685565b6040516101929190613f65565b60405180910390f35b6101b560048036038101906101b091906140d9565b610767565b005b6101d160048036038101906101cc9190614164565b6108eb565b6040516101de9190614219565b60405180910390f35b6101ef61097f565b6040516101fc919061429a565b60405180910390f35b61021f600480360381019061021a919061436a565b6109a5565b005b61023b60048036038101906102369190614439565b610a46565b005b61025760048036038101906102529190614529565b610b06565b604051610264919061465f565b60405180910390f35b610275610c1f565b005b61027f610ca7565b005b610289610d64565b6040516102969190614690565b60405180910390f35b6102b960048036038101906102b491906146ab565b610d8e565b005b6102d560048036038101906102d091906140d9565b610f9c565b005b6102f160048036038101906102ec91906147c2565b6111e4565b005b61030d6004803603810190610308919061485d565b611365565b005b610329600480360381019061032491906148bd565b611713565b6040516103369190613f65565b60405180910390f35b61035960048036038101906103549190613e5b565b611729565b6040516103669190614933565b60405180910390f35b6103896004803603810190610384919061494e565b61179b565b005b6103a560048036038101906103a091906149ed565b61191b565b6040516103b29190613f65565b60405180910390f35b6103d560048036038101906103d09190614a2d565b6119af565b005b6103f160048036038101906103ec9190614439565b611a50565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045b90614b36565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff8016831190508015610627576000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b76f419856040518263ffffffff1660e01b81526004016104e49190613eaa565b602060405180830381865afa158015610501573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105259190614b82565b90506509184e72a000806066600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900467ffffffffffffffff16836105a29190614bde565b6105ac9190614c12565b67ffffffffffffffff166066600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546106149190614c50565b61061e9190614cd9565b9250505061067f565b6066600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549150505b92915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061075057507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610760575061075f82611b48565b5b9050919050565b61076f611bb2565b73ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061080357506107cd611bb2565b73ffffffffffffffffffffffffffffffffffffffff166107eb610d64565b73ffffffffffffffffffffffffffffffffffffffff16145b610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083990614d56565b60405180910390fd5b60005b82518110156108ca57600083828151811061086357610862614d76565b5b6020026020010151905061087681611bba565b156108b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ad90614df1565b60405180910390fd5b5080806108c290614e11565b915050610845565b506108e683838360405180602001604052806000815250611db8565b505050565b6060606880546108fa90614e89565b80601f016020809104026020016040519081016040528092919081815260200182805461092690614e89565b80156109735780601f1061094857610100808354040283529160200191610973565b820191906000526020600020905b81548152906001019060200180831161095657829003601f168201915b50505050509050919050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109ad611bb2565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806109f357506109f2856109ed611bb2565b61191b565b5b610a32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2990614f2d565b60405180910390fd5b610a3f8585858585611fda565b5050505050565b610a4e611bb2565b73ffffffffffffffffffffffffffffffffffffffff16610a6c610d64565b73ffffffffffffffffffffffffffffffffffffffff1614610ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab990614f99565b60405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60608151835114610b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b439061502b565b60405180910390fd5b6000835167ffffffffffffffff811115610b6957610b68613f96565b5b604051908082528060200260200182016040528015610b975781602001602082028036833780820191505090505b50905060005b8451811015610c1457610be4858281518110610bbc57610bbb614d76565b5b6020026020010151858381518110610bd757610bd6614d76565b5b60200260200101516103f3565b828281518110610bf757610bf6614d76565b5b60200260200101818152505080610c0d90614e11565b9050610b9d565b508091505092915050565b610c27611bb2565b73ffffffffffffffffffffffffffffffffffffffff16610c45610d64565b73ffffffffffffffffffffffffffffffffffffffff1614610c9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9290614f99565b60405180910390fd5b610ca560006122fa565b565b6000610cb360016123c0565b90508015610cd7576001600060016101000a81548160ff0219169083151502179055505b610cf86040518060600160405280602f8152602001615f6f602f91396124b0565b610d006124bc565b610d086124be565b8015610d615760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d589190615093565b60405180910390a15b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d96611bb2565b73ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610e2a5750610df4611bb2565b73ffffffffffffffffffffffffffffffffffffffff16610e12610d64565b73ffffffffffffffffffffffffffffffffffffffff16145b610e69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6090614d56565b60405180910390fd5b60005b8451811015610eeb57610e98858281518110610e8b57610e8a614d76565b5b6020026020010151611bba565b15610ed8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecf906150fa565b60405180910390fd5b8080610ee390614e11565b915050610e6c565b5060005b8251811015610f6e57610f1b838281518110610f0e57610f0d614d76565b5b6020026020010151611bba565b15610f5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f52906150fa565b60405180910390fd5b8080610f6690614e11565b915050610eef565b50610f8a85858560405180602001604052806000815250611db8565b610f95858383612517565b5050505050565b610fa4611bb2565b73ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806110385750611002611bb2565b73ffffffffffffffffffffffffffffffffffffffff16611020610d64565b73ffffffffffffffffffffffffffffffffffffffff16145b611077576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106e90614d56565b60405180910390fd5b6000825167ffffffffffffffff81111561109457611093613f96565b5b6040519080825280602002602001820160405280156110c25781602001602082028036833780820191505090505b5090506000825167ffffffffffffffff8111156110e2576110e1613f96565b5b6040519080825280602002602001820160405280156111105781602001602082028036833780820191505090505b50905060005b82518110156111d157600085828151811061113457611133614d76565b5b60200260200101519050600085838151811061115357611152614d76565b5b6020026020010151905061116682611bba565b1561117b576111768883836127d0565b6111bc565b8185848151811061118f5761118e614d76565b5b602002602001018181525050808484815181106111af576111ae614d76565b5b6020026020010181815250505b505080806111c990614e11565b915050611116565b506111dd858383612517565b5050505050565b8173ffffffffffffffffffffffffffffffffffffffff16611203611bb2565b73ffffffffffffffffffffffffffffffffffffffff16141561125a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112519061518c565b60405180910390fd5b8060676000611267611bb2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611314611bb2565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516113599190613f65565b60405180910390a35050565b61136d611bb2565b73ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061140157506113cb611bb2565b73ffffffffffffffffffffffffffffffffffffffff166113e9610d64565b73ffffffffffffffffffffffffffffffffffffffff16145b611440576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143790614d56565b60405180910390fd5b60008282905011611486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147d906151f8565b60405180910390fd5b60008282905067ffffffffffffffff8111156114a5576114a4613f96565b5b6040519080825280602002602001820160405280156114d35781602001602082028036833780820191505090505b50905060008383905067ffffffffffffffff8111156114f5576114f4613f96565b5b6040519080825280602002602001820160405280156115235781602001602082028036833780820191505090505b50905060008484905067ffffffffffffffff81111561154557611544613f96565b5b6040519080825280602002602001820160405280156115735781602001602082028036833780820191505090505b50905060005b858590508110156116ee57600086868381811061159957611598614d76565b5b9050608002016000013590508686838181106115b8576115b7614d76565b5b90506080020160400160208101906115d09190615218565b1561161d57611618888888858181106115ec576115eb614d76565b5b9050608002016000013589898681811061160957611608614d76565b5b90506080020160200135612bc3565b6116da565b8084838151811061163157611630614d76565b5b6020026020010181815250508686838181106116505761164f614d76565b5b9050608002016020013585838151811061166d5761166c614d76565b5b60200260200101818152505086868381811061168c5761168b614d76565b5b90506080020160600160208101906116a4919061525a565b8383815181106116b7576116b6614d76565b5b602002602001019067ffffffffffffffff16908167ffffffffffffffff16815250505b5080806116e690614e11565b915050611579565b5061170b8683858460405180602001604052806000815250612f3e565b505050505050565b600061172084848461326e565b90509392505050565b60006066600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900467ffffffffffffffff16905092915050565b6117a3611bb2565b73ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806118375750611801611bb2565b73ffffffffffffffffffffffffffffffffffffffff1661181f610d64565b73ffffffffffffffffffffffffffffffffffffffff16145b611876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186d90614d56565b60405180910390fd5b60005b82518110156118f8576118a583828151811061189857611897614d76565b5b6020026020010151611bba565b156118e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118dc906150fa565b60405180910390fd5b80806118f090614e11565b915050611879565b506119158484848460405180602001604052806000815250611fda565b50505050565b6000606760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6119b7611bb2565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806119fd57506119fc856119f7611bb2565b61191b565b5b611a3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a33906152f9565b60405180910390fd5b611a4985858585856132ec565b5050505050565b611a58611bb2565b73ffffffffffffffffffffffffffffffffffffffff16611a76610d64565b73ffffffffffffffffffffffffffffffffffffffff1614611acc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac390614f99565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b339061538b565b60405180910390fd5b611b45816122fa565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff166301ffc9a76380ac58cd60e01b604051602401611bf391906153ba565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611c41919061541c565b6000604051808303816000865af19150503d8060008114611c7e576040519150601f19603f3d011682016040523d82523d6000602084013e611c83565b606091505b5091509150818015611c96575060008151115b8015611cb2575080806020019051810190611cb19190615448565b5b15611db1578373ffffffffffffffffffffffffffffffffffffffff166301ffc9a7635b5e139f60e01b604051602401611ceb91906153ba565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611d39919061541c565b6000604051808303816000865af19150503d8060008114611d76576040519150601f19603f3d011682016040523d82523d6000602084013e611d7b565b606091505b508092508193505050818015611d92575060008151115b8015611dae575080806020019051810190611dad9190615448565b5b92505b5050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611e28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1f906154e7565b60405180910390fd5b8151835114611e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6390615579565b60405180910390fd5b6000611e76611bb2565b9050611e878160008787878761357a565b60005b8451811015611f4457838181518110611ea657611ea5614d76565b5b602002602001015160666000878481518110611ec557611ec4614d76565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254611f2a9190615599565b925050819055508080611f3c90614e11565b915050611e8a565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611fbc9291906155ef565b60405180910390a4611fd38160008787878761365d565b5050505050565b815183511461201e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201590615579565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561208e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208590615698565b60405180910390fd5b6000612098611bb2565b90506120a881878787878761357a565b60005b84518110156122655760008582815181106120c9576120c8614d76565b5b6020026020010151905060008583815181106120e8576120e7614d76565b5b6020026020010151905060006066600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015490508181101561218d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121849061572a565b60405180910390fd5b8181036066600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550816066600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461224a9190615599565b925050819055505050508061225e90614e11565b90506120ab565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122dc9291906155ef565b60405180910390a46122f281878787878761365d565b505050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060019054906101000a900460ff16156124375760018260ff161480156123ef57506123ed30613835565b155b61242e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612425906157bc565b60405180910390fd5b600090506124ab565b8160ff1660008054906101000a900460ff1660ff161061248c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612483906157bc565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b6124b981613858565b50565b565b600060019054906101000a900460ff1661250d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125049061584e565b60405180910390fd5b612515613872565b565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257e906158e0565b60405180910390fd5b80518251146125cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c290615579565b60405180910390fd5b60006125d5611bb2565b90506125f58185600086866040518060200160405280600081525061357a565b60005b835181101561274a57600084828151811061261657612615614d76565b5b60200260200101519050600084838151811061263557612634614d76565b5b6020026020010151905060006066600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050818110156126da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126d190615972565b60405180910390fd5b8181036066600085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550505050808061274290614e11565b9150506125f8565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516127c29291906155ef565b60405180910390a450505050565b6127d8611bb2565b73ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061286c5750612836611bb2565b73ffffffffffffffffffffffffffffffffffffffff16612854610d64565b73ffffffffffffffffffffffffffffffffffffffff16145b6128ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a290614d56565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561291b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612912906158e0565b60405180910390fd5b6000612925611bb2565b905060006066600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116129bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129b490615a04565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1660696000858152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612a6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6690615a96565b60405180910390fd5b60016066600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254612ad39190615ab6565b92505081905550600060696000858152602001908152602001600020600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628686604051612bb5929190615aea565b60405180910390a450505050565b612bcb611bb2565b73ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480612c5f5750612c29611bb2565b73ffffffffffffffffffffffffffffffffffffffff16612c47610d64565b73ffffffffffffffffffffffffffffffffffffffff16145b612c9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c9590614d56565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d05906154e7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660696000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612dc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612db890615b85565b60405180910390fd5b6000612dcb611bb2565b905060016066600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254612e319190615599565b925050819055508360696000858152602001908152602001600020600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628686604051612f12929190615aea565b60405180910390a4612f38816000868686604051806020016040528060008152506138d3565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415612fae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fa5906154e7565b60405180910390fd5b8251845114612ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe990615579565b60405180910390fd5b8151845114613036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161302d90615c17565b60405180910390fd5b6000613040611bb2565b90506130518160008888888761357a565b60005b85518110156131d7578481815181106130705761306f614d76565b5b60200260200101516066600088848151811061308f5761308e614d76565b5b6020026020010151815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060008482815181106130fe576130fd614d76565b5b602002602001015167ffffffffffffffff16146131c45783818151811061312857613127614d76565b5b60200260200101516066600088848151811061314757613146614d76565b5b6020026020010151815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b80806131cf90614e11565b915050613054565b508573ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fa15ec7f7e8016eff0ab0ab65aa6282af177b24e430d558af0ef94e2bdd6a738f888860405161324f9291906155ef565b60405180910390a46132668160008888888761365d565b505050505050565b60008373ffffffffffffffffffffffffffffffffffffffff1660696000858152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161490509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561335c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161335390615698565b60405180910390fd5b6000613366611bb2565b905061338681878761337788613aab565b61338088613aab565b8761357a565b60006066600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905083811015613421576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134189061572a565b60405180910390fd5b8381036066600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550836066600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546134de9190615599565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161355b929190615aea565b60405180910390a4613571828888888888613b25565b50505050505050565b613582611bb2565b73ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061361657506135e0611bb2565b73ffffffffffffffffffffffffffffffffffffffff166135fe610d64565b73ffffffffffffffffffffffffffffffffffffffff16145b613655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161364c90614d56565b60405180910390fd5b505050505050565b61367c8473ffffffffffffffffffffffffffffffffffffffff16613cfd565b1561382d578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016136c2959493929190615c81565b6020604051808303816000875af19250505080156136fe57506040513d601f19601f820116820180604052508101906136fb9190615cfe565b60015b6137a45761370a615d38565b806308c379a01415613767575061371f615d5a565b8061372a5750613769565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161375e9190614219565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161379b90615e62565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461382b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161382290615ef4565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b806068908051906020019061386e929190613d10565b5050565b600060019054906101000a900460ff166138c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138b89061584e565b60405180910390fd5b6138d16138cc611bb2565b6122fa565b565b6138f28473ffffffffffffffffffffffffffffffffffffffff16613cfd565b15613aa3578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401613938959493929190615f14565b6020604051808303816000875af192505050801561397457506040513d601f19601f820116820180604052508101906139719190615cfe565b60015b613a1a57613980615d38565b806308c379a014156139dd5750613995615d5a565b806139a057506139df565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139d49190614219565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a1190615e62565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a9890615ef4565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115613aca57613ac9613f96565b5b604051908082528060200260200182016040528015613af85781602001602082028036833780820191505090505b5090508281600081518110613b1057613b0f614d76565b5b60200260200101818152505080915050919050565b613b448473ffffffffffffffffffffffffffffffffffffffff16613cfd565b15613cf5578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401613b8a959493929190615f14565b6020604051808303816000875af1925050508015613bc657506040513d601f19601f82011682018060405250810190613bc39190615cfe565b60015b613c6c57613bd2615d38565b806308c379a01415613c2f5750613be7615d5a565b80613bf25750613c31565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c269190614219565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c6390615e62565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613cf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613cea90615ef4565b60405180910390fd5b505b505050505050565b600080823b905060008111915050919050565b828054613d1c90614e89565b90600052602060002090601f016020900481019282613d3e5760008555613d85565b82601f10613d5757805160ff1916838001178555613d85565b82800160010185558215613d85579182015b82811115613d84578251825591602001919060010190613d69565b5b509050613d929190613d96565b5090565b5b80821115613daf576000816000905550600101613d97565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613df282613dc7565b9050919050565b613e0281613de7565b8114613e0d57600080fd5b50565b600081359050613e1f81613df9565b92915050565b6000819050919050565b613e3881613e25565b8114613e4357600080fd5b50565b600081359050613e5581613e2f565b92915050565b60008060408385031215613e7257613e71613dbd565b5b6000613e8085828601613e10565b9250506020613e9185828601613e46565b9150509250929050565b613ea481613e25565b82525050565b6000602082019050613ebf6000830184613e9b565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613efa81613ec5565b8114613f0557600080fd5b50565b600081359050613f1781613ef1565b92915050565b600060208284031215613f3357613f32613dbd565b5b6000613f4184828501613f08565b91505092915050565b60008115159050919050565b613f5f81613f4a565b82525050565b6000602082019050613f7a6000830184613f56565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613fce82613f85565b810181811067ffffffffffffffff82111715613fed57613fec613f96565b5b80604052505050565b6000614000613db3565b905061400c8282613fc5565b919050565b600067ffffffffffffffff82111561402c5761402b613f96565b5b602082029050602081019050919050565b600080fd5b600061405561405084614011565b613ff6565b905080838252602082019050602084028301858111156140785761407761403d565b5b835b818110156140a1578061408d8882613e46565b84526020840193505060208101905061407a565b5050509392505050565b600082601f8301126140c0576140bf613f80565b5b81356140d0848260208601614042565b91505092915050565b6000806000606084860312156140f2576140f1613dbd565b5b600061410086828701613e10565b935050602084013567ffffffffffffffff81111561412157614120613dc2565b5b61412d868287016140ab565b925050604084013567ffffffffffffffff81111561414e5761414d613dc2565b5b61415a868287016140ab565b9150509250925092565b60006020828403121561417a57614179613dbd565b5b600061418884828501613e46565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156141cb5780820151818401526020810190506141b0565b838111156141da576000848401525b50505050565b60006141eb82614191565b6141f5818561419c565b93506142058185602086016141ad565b61420e81613f85565b840191505092915050565b6000602082019050818103600083015261423381846141e0565b905092915050565b6000819050919050565b600061426061425b61425684613dc7565b61423b565b613dc7565b9050919050565b600061427282614245565b9050919050565b600061428482614267565b9050919050565b61429481614279565b82525050565b60006020820190506142af600083018461428b565b92915050565b600080fd5b600067ffffffffffffffff8211156142d5576142d4613f96565b5b6142de82613f85565b9050602081019050919050565b82818337600083830152505050565b600061430d614308846142ba565b613ff6565b905082815260208101848484011115614329576143286142b5565b5b6143348482856142eb565b509392505050565b600082601f83011261435157614350613f80565b5b81356143618482602086016142fa565b91505092915050565b600080600080600060a0868803121561438657614385613dbd565b5b600061439488828901613e10565b95505060206143a588828901613e10565b945050604086013567ffffffffffffffff8111156143c6576143c5613dc2565b5b6143d2888289016140ab565b935050606086013567ffffffffffffffff8111156143f3576143f2613dc2565b5b6143ff888289016140ab565b925050608086013567ffffffffffffffff8111156144205761441f613dc2565b5b61442c8882890161433c565b9150509295509295909350565b60006020828403121561444f5761444e613dbd565b5b600061445d84828501613e10565b91505092915050565b600067ffffffffffffffff82111561448157614480613f96565b5b602082029050602081019050919050565b60006144a56144a084614466565b613ff6565b905080838252602082019050602084028301858111156144c8576144c761403d565b5b835b818110156144f157806144dd8882613e10565b8452602084019350506020810190506144ca565b5050509392505050565b600082601f8301126145105761450f613f80565b5b8135614520848260208601614492565b91505092915050565b600080604083850312156145405761453f613dbd565b5b600083013567ffffffffffffffff81111561455e5761455d613dc2565b5b61456a858286016144fb565b925050602083013567ffffffffffffffff81111561458b5761458a613dc2565b5b614597858286016140ab565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6145d681613e25565b82525050565b60006145e883836145cd565b60208301905092915050565b6000602082019050919050565b600061460c826145a1565b61461681856145ac565b9350614621836145bd565b8060005b8381101561465257815161463988826145dc565b9750614644836145f4565b925050600181019050614625565b5085935050505092915050565b600060208201905081810360008301526146798184614601565b905092915050565b61468a81613de7565b82525050565b60006020820190506146a56000830184614681565b92915050565b600080600080600060a086880312156146c7576146c6613dbd565b5b60006146d588828901613e10565b955050602086013567ffffffffffffffff8111156146f6576146f5613dc2565b5b614702888289016140ab565b945050604086013567ffffffffffffffff81111561472357614722613dc2565b5b61472f888289016140ab565b935050606086013567ffffffffffffffff8111156147505761474f613dc2565b5b61475c888289016140ab565b925050608086013567ffffffffffffffff81111561477d5761477c613dc2565b5b614789888289016140ab565b9150509295509295909350565b61479f81613f4a565b81146147aa57600080fd5b50565b6000813590506147bc81614796565b92915050565b600080604083850312156147d9576147d8613dbd565b5b60006147e785828601613e10565b92505060206147f8858286016147ad565b9150509250929050565b600080fd5b60008083601f84011261481d5761481c613f80565b5b8235905067ffffffffffffffff81111561483a57614839614802565b5b6020830191508360808202830111156148565761485561403d565b5b9250929050565b60008060006040848603121561487657614875613dbd565b5b600061488486828701613e10565b935050602084013567ffffffffffffffff8111156148a5576148a4613dc2565b5b6148b186828701614807565b92509250509250925092565b6000806000606084860312156148d6576148d5613dbd565b5b60006148e486828701613e10565b93505060206148f586828701613e46565b925050604061490686828701613e46565b9150509250925092565b600067ffffffffffffffff82169050919050565b61492d81614910565b82525050565b60006020820190506149486000830184614924565b92915050565b6000806000806080858703121561496857614967613dbd565b5b600061497687828801613e10565b945050602061498787828801613e10565b935050604085013567ffffffffffffffff8111156149a8576149a7613dc2565b5b6149b4878288016140ab565b925050606085013567ffffffffffffffff8111156149d5576149d4613dc2565b5b6149e1878288016140ab565b91505092959194509250565b60008060408385031215614a0457614a03613dbd565b5b6000614a1285828601613e10565b9250506020614a2385828601613e10565b9150509250929050565b600080600080600060a08688031215614a4957614a48613dbd565b5b6000614a5788828901613e10565b9550506020614a6888828901613e10565b9450506040614a7988828901613e46565b9350506060614a8a88828901613e46565b925050608086013567ffffffffffffffff811115614aab57614aaa613dc2565b5b614ab78882890161433c565b9150509295509295909350565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000614b20602b8361419c565b9150614b2b82614ac4565b604082019050919050565b60006020820190508181036000830152614b4f81614b13565b9050919050565b614b5f81614910565b8114614b6a57600080fd5b50565b600081519050614b7c81614b56565b92915050565b600060208284031215614b9857614b97613dbd565b5b6000614ba684828501614b6d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614be982614910565b9150614bf483614910565b925082821015614c0757614c06614baf565b5b828203905092915050565b6000614c1d82614910565b9150614c2883614910565b92508267ffffffffffffffff03821115614c4557614c44614baf565b5b828201905092915050565b6000614c5b82613e25565b9150614c6683613e25565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614c9f57614c9e614baf565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614ce482613e25565b9150614cef83613e25565b925082614cff57614cfe614caa565b5b828204905092915050565b7f63616c6c6572206973206e6f7420706f6f6c0000000000000000000000000000600082015250565b6000614d4060128361419c565b9150614d4b82614d0a565b602082019050919050565b60006020820190508181036000830152614d6f81614d33565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f455243373231206e6f7420616363657074656400000000000000000000000000600082015250565b6000614ddb60138361419c565b9150614de682614da5565b602082019050919050565b60006020820190508181036000830152614e0a81614dce565b9050919050565b6000614e1c82613e25565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614e4f57614e4e614baf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614ea157607f821691505b60208210811415614eb557614eb4614e5a565b5b50919050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b6000614f1760328361419c565b9150614f2282614ebb565b604082019050919050565b60006020820190508181036000830152614f4681614f0a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614f8360208361419c565b9150614f8e82614f4d565b602082019050919050565b60006020820190508181036000830152614fb281614f76565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b600061501560298361419c565b915061502082614fb9565b604082019050919050565b6000602082019050818103600083015261504481615008565b9050919050565b6000819050919050565b600060ff82169050919050565b600061507d6150786150738461504b565b61423b565b615055565b9050919050565b61508d81615062565b82525050565b60006020820190506150a86000830184615084565b92915050565b7f63616e6e6f74207472616e736665722045524337323120746f6b656e00000000600082015250565b60006150e4601c8361419c565b91506150ef826150ae565b602082019050919050565b60006020820190508181036000830152615113816150d7565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b600061517660298361419c565b91506151818261511a565b604082019050919050565b600060208201905081810360008301526151a581615169565b9050919050565b7f302d6c656e206172677300000000000000000000000000000000000000000000600082015250565b60006151e2600a8361419c565b91506151ed826151ac565b602082019050919050565b60006020820190508181036000830152615211816151d5565b9050919050565b60006020828403121561522e5761522d613dbd565b5b600061523c848285016147ad565b91505092915050565b60008135905061525481614b56565b92915050565b6000602082840312156152705761526f613dbd565b5b600061527e84828501615245565b91505092915050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b60006152e360298361419c565b91506152ee82615287565b604082019050919050565b60006020820190508181036000830152615312816152d6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061537560268361419c565b915061538082615319565b604082019050919050565b600060208201905081810360008301526153a481615368565b9050919050565b6153b481613ec5565b82525050565b60006020820190506153cf60008301846153ab565b92915050565b600081519050919050565b600081905092915050565b60006153f6826153d5565b61540081856153e0565b93506154108185602086016141ad565b80840191505092915050565b600061542882846153eb565b915081905092915050565b60008151905061544281614796565b92915050565b60006020828403121561545e5761545d613dbd565b5b600061546c84828501615433565b91505092915050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006154d160218361419c565b91506154dc82615475565b604082019050919050565b60006020820190508181036000830152615500816154c4565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b600061556360288361419c565b915061556e82615507565b604082019050919050565b6000602082019050818103600083015261559281615556565b9050919050565b60006155a482613e25565b91506155af83613e25565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156155e4576155e3614baf565b5b828201905092915050565b600060408201905081810360008301526156098185614601565b9050818103602083015261561d8184614601565b90509392505050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061568260258361419c565b915061568d82615626565b604082019050919050565b600060208201905081810360008301526156b181615675565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000615714602a8361419c565b915061571f826156b8565b604082019050919050565b6000602082019050818103600083015261574381615707565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006157a6602e8361419c565b91506157b18261574a565b604082019050919050565b600060208201905081810360008301526157d581615799565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000615838602b8361419c565b9150615843826157dc565b604082019050919050565b600060208201905081810360008301526158678161582b565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006158ca60238361419c565b91506158d58261586e565b604082019050919050565b600060208201905081810360008301526158f9816158bd565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b600061595c60248361419c565b915061596782615900565b604082019050919050565b6000602082019050818103600083015261598b8161594f565b9050919050565b7f455243313135353a206275726e20746f6b656e4964206578636565647320626160008201527f6c616e6365000000000000000000000000000000000000000000000000000000602082015250565b60006159ee60258361419c565b91506159f982615992565b604082019050919050565b60006020820190508181036000830152615a1d816159e1565b9050919050565b7f4552433732313a20616c72656164792062656c6f6e677320746f20616e6f746860008201527f6572206164647265737300000000000000000000000000000000000000000000602082015250565b6000615a80602a8361419c565b9150615a8b82615a24565b604082019050919050565b60006020820190508181036000830152615aaf81615a73565b9050919050565b6000615ac182613e25565b9150615acc83613e25565b925082821015615adf57615ade614baf565b5b828203905092915050565b6000604082019050615aff6000830185613e9b565b615b0c6020830184613e9b565b9392505050565b7f45524337323120616c7265616479206f776e656420627920616e6f746865722060008201527f7573657200000000000000000000000000000000000000000000000000000000602082015250565b6000615b6f60248361419c565b9150615b7a82615b13565b604082019050919050565b60006020820190508181036000830152615b9e81615b62565b9050919050565b7f455243313135353a2069647320616e64207072696365496e6465786573206c6560008201527f6e206d69736d6174636800000000000000000000000000000000000000000000602082015250565b6000615c01602a8361419c565b9150615c0c82615ba5565b604082019050919050565b60006020820190508181036000830152615c3081615bf4565b9050919050565b600082825260208201905092915050565b6000615c53826153d5565b615c5d8185615c37565b9350615c6d8185602086016141ad565b615c7681613f85565b840191505092915050565b600060a082019050615c966000830188614681565b615ca36020830187614681565b8181036040830152615cb58186614601565b90508181036060830152615cc98185614601565b90508181036080830152615cdd8184615c48565b90509695505050505050565b600081519050615cf881613ef1565b92915050565b600060208284031215615d1457615d13613dbd565b5b6000615d2284828501615ce9565b91505092915050565b60008160e01c9050919050565b600060033d1115615d575760046000803e615d54600051615d2b565b90505b90565b600060443d1015615d6a57615ded565b615d72613db3565b60043d036004823e80513d602482011167ffffffffffffffff82111715615d9a575050615ded565b808201805167ffffffffffffffff811115615db85750505050615ded565b80602083010160043d038501811115615dd5575050505050615ded565b615de482602001850186613fc5565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000615e4c60348361419c565b9150615e5782615df0565b604082019050919050565b60006020820190508181036000830152615e7b81615e3f565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000615ede60288361419c565b9150615ee982615e82565b604082019050919050565b60006020820190508181036000830152615f0d81615ed1565b9050919050565b600060a082019050615f296000830188614681565b615f366020830187614681565b615f436040830186613e9b565b615f506060830185613e9b565b8181036080830152615f628184615c48565b9050969550505050505056fe68747470733a2f2f696e66696e6974792e65786368616e67652f742f7b746f6b656e416464726573737d2e6a736f6ea2646970667358221220031bed4e4010ae6945742d5ec179dc6bff7aa466102e88d4c53aa9a1fcf4dd9564736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80638da5cb5b116100b8578063bff849af1161007c578063bff849af1461030f578063c288cd051461033f578063dfca6a241461036f578063e985e9c51461038b578063f242432a146103bb578063f2fde38b146103d757610136565b80638da5cb5b146102815780638ed699621461029f5780639339b0a0146102bb578063a22cb465146102d7578063b93bc654146102f357610136565b80632eb2c2d6116100ff5780632eb2c2d6146102055780634437152a146102215780634e1273f41461023d578063715018a61461026d5780638129fc1c1461027757610136565b8062fdd58e1461013b57806301ffc9a71461016b5780630bdee27b1461019b5780630e89341c146101b757806316f0115b146101e7575b600080fd5b61015560048036038101906101509190613e5b565b6103f3565b6040516101629190613eaa565b60405180910390f35b61018560048036038101906101809190613f1d565b610685565b6040516101929190613f65565b60405180910390f35b6101b560048036038101906101b091906140d9565b610767565b005b6101d160048036038101906101cc9190614164565b6108eb565b6040516101de9190614219565b60405180910390f35b6101ef61097f565b6040516101fc919061429a565b60405180910390f35b61021f600480360381019061021a919061436a565b6109a5565b005b61023b60048036038101906102369190614439565b610a46565b005b61025760048036038101906102529190614529565b610b06565b604051610264919061465f565b60405180910390f35b610275610c1f565b005b61027f610ca7565b005b610289610d64565b6040516102969190614690565b60405180910390f35b6102b960048036038101906102b491906146ab565b610d8e565b005b6102d560048036038101906102d091906140d9565b610f9c565b005b6102f160048036038101906102ec91906147c2565b6111e4565b005b61030d6004803603810190610308919061485d565b611365565b005b610329600480360381019061032491906148bd565b611713565b6040516103369190613f65565b60405180910390f35b61035960048036038101906103549190613e5b565b611729565b6040516103669190614933565b60405180910390f35b6103896004803603810190610384919061494e565b61179b565b005b6103a560048036038101906103a091906149ed565b61191b565b6040516103b29190613f65565b60405180910390f35b6103d560048036038101906103d09190614a2d565b6119af565b005b6103f160048036038101906103ec9190614439565b611a50565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045b90614b36565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff8016831190508015610627576000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b76f419856040518263ffffffff1660e01b81526004016104e49190613eaa565b602060405180830381865afa158015610501573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105259190614b82565b90506509184e72a000806066600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900467ffffffffffffffff16836105a29190614bde565b6105ac9190614c12565b67ffffffffffffffff166066600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546106149190614c50565b61061e9190614cd9565b9250505061067f565b6066600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549150505b92915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061075057507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610760575061075f82611b48565b5b9050919050565b61076f611bb2565b73ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061080357506107cd611bb2565b73ffffffffffffffffffffffffffffffffffffffff166107eb610d64565b73ffffffffffffffffffffffffffffffffffffffff16145b610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083990614d56565b60405180910390fd5b60005b82518110156108ca57600083828151811061086357610862614d76565b5b6020026020010151905061087681611bba565b156108b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ad90614df1565b60405180910390fd5b5080806108c290614e11565b915050610845565b506108e683838360405180602001604052806000815250611db8565b505050565b6060606880546108fa90614e89565b80601f016020809104026020016040519081016040528092919081815260200182805461092690614e89565b80156109735780601f1061094857610100808354040283529160200191610973565b820191906000526020600020905b81548152906001019060200180831161095657829003601f168201915b50505050509050919050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109ad611bb2565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806109f357506109f2856109ed611bb2565b61191b565b5b610a32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2990614f2d565b60405180910390fd5b610a3f8585858585611fda565b5050505050565b610a4e611bb2565b73ffffffffffffffffffffffffffffffffffffffff16610a6c610d64565b73ffffffffffffffffffffffffffffffffffffffff1614610ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab990614f99565b60405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60608151835114610b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b439061502b565b60405180910390fd5b6000835167ffffffffffffffff811115610b6957610b68613f96565b5b604051908082528060200260200182016040528015610b975781602001602082028036833780820191505090505b50905060005b8451811015610c1457610be4858281518110610bbc57610bbb614d76565b5b6020026020010151858381518110610bd757610bd6614d76565b5b60200260200101516103f3565b828281518110610bf757610bf6614d76565b5b60200260200101818152505080610c0d90614e11565b9050610b9d565b508091505092915050565b610c27611bb2565b73ffffffffffffffffffffffffffffffffffffffff16610c45610d64565b73ffffffffffffffffffffffffffffffffffffffff1614610c9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9290614f99565b60405180910390fd5b610ca560006122fa565b565b6000610cb360016123c0565b90508015610cd7576001600060016101000a81548160ff0219169083151502179055505b610cf86040518060600160405280602f8152602001615f6f602f91396124b0565b610d006124bc565b610d086124be565b8015610d615760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d589190615093565b60405180910390a15b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d96611bb2565b73ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610e2a5750610df4611bb2565b73ffffffffffffffffffffffffffffffffffffffff16610e12610d64565b73ffffffffffffffffffffffffffffffffffffffff16145b610e69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6090614d56565b60405180910390fd5b60005b8451811015610eeb57610e98858281518110610e8b57610e8a614d76565b5b6020026020010151611bba565b15610ed8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecf906150fa565b60405180910390fd5b8080610ee390614e11565b915050610e6c565b5060005b8251811015610f6e57610f1b838281518110610f0e57610f0d614d76565b5b6020026020010151611bba565b15610f5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f52906150fa565b60405180910390fd5b8080610f6690614e11565b915050610eef565b50610f8a85858560405180602001604052806000815250611db8565b610f95858383612517565b5050505050565b610fa4611bb2565b73ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806110385750611002611bb2565b73ffffffffffffffffffffffffffffffffffffffff16611020610d64565b73ffffffffffffffffffffffffffffffffffffffff16145b611077576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106e90614d56565b60405180910390fd5b6000825167ffffffffffffffff81111561109457611093613f96565b5b6040519080825280602002602001820160405280156110c25781602001602082028036833780820191505090505b5090506000825167ffffffffffffffff8111156110e2576110e1613f96565b5b6040519080825280602002602001820160405280156111105781602001602082028036833780820191505090505b50905060005b82518110156111d157600085828151811061113457611133614d76565b5b60200260200101519050600085838151811061115357611152614d76565b5b6020026020010151905061116682611bba565b1561117b576111768883836127d0565b6111bc565b8185848151811061118f5761118e614d76565b5b602002602001018181525050808484815181106111af576111ae614d76565b5b6020026020010181815250505b505080806111c990614e11565b915050611116565b506111dd858383612517565b5050505050565b8173ffffffffffffffffffffffffffffffffffffffff16611203611bb2565b73ffffffffffffffffffffffffffffffffffffffff16141561125a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112519061518c565b60405180910390fd5b8060676000611267611bb2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611314611bb2565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516113599190613f65565b60405180910390a35050565b61136d611bb2565b73ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061140157506113cb611bb2565b73ffffffffffffffffffffffffffffffffffffffff166113e9610d64565b73ffffffffffffffffffffffffffffffffffffffff16145b611440576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143790614d56565b60405180910390fd5b60008282905011611486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147d906151f8565b60405180910390fd5b60008282905067ffffffffffffffff8111156114a5576114a4613f96565b5b6040519080825280602002602001820160405280156114d35781602001602082028036833780820191505090505b50905060008383905067ffffffffffffffff8111156114f5576114f4613f96565b5b6040519080825280602002602001820160405280156115235781602001602082028036833780820191505090505b50905060008484905067ffffffffffffffff81111561154557611544613f96565b5b6040519080825280602002602001820160405280156115735781602001602082028036833780820191505090505b50905060005b858590508110156116ee57600086868381811061159957611598614d76565b5b9050608002016000013590508686838181106115b8576115b7614d76565b5b90506080020160400160208101906115d09190615218565b1561161d57611618888888858181106115ec576115eb614d76565b5b9050608002016000013589898681811061160957611608614d76565b5b90506080020160200135612bc3565b6116da565b8084838151811061163157611630614d76565b5b6020026020010181815250508686838181106116505761164f614d76565b5b9050608002016020013585838151811061166d5761166c614d76565b5b60200260200101818152505086868381811061168c5761168b614d76565b5b90506080020160600160208101906116a4919061525a565b8383815181106116b7576116b6614d76565b5b602002602001019067ffffffffffffffff16908167ffffffffffffffff16815250505b5080806116e690614e11565b915050611579565b5061170b8683858460405180602001604052806000815250612f3e565b505050505050565b600061172084848461326e565b90509392505050565b60006066600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900467ffffffffffffffff16905092915050565b6117a3611bb2565b73ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806118375750611801611bb2565b73ffffffffffffffffffffffffffffffffffffffff1661181f610d64565b73ffffffffffffffffffffffffffffffffffffffff16145b611876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186d90614d56565b60405180910390fd5b60005b82518110156118f8576118a583828151811061189857611897614d76565b5b6020026020010151611bba565b156118e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118dc906150fa565b60405180910390fd5b80806118f090614e11565b915050611879565b506119158484848460405180602001604052806000815250611fda565b50505050565b6000606760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6119b7611bb2565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806119fd57506119fc856119f7611bb2565b61191b565b5b611a3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a33906152f9565b60405180910390fd5b611a4985858585856132ec565b5050505050565b611a58611bb2565b73ffffffffffffffffffffffffffffffffffffffff16611a76610d64565b73ffffffffffffffffffffffffffffffffffffffff1614611acc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac390614f99565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b339061538b565b60405180910390fd5b611b45816122fa565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff166301ffc9a76380ac58cd60e01b604051602401611bf391906153ba565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611c41919061541c565b6000604051808303816000865af19150503d8060008114611c7e576040519150601f19603f3d011682016040523d82523d6000602084013e611c83565b606091505b5091509150818015611c96575060008151115b8015611cb2575080806020019051810190611cb19190615448565b5b15611db1578373ffffffffffffffffffffffffffffffffffffffff166301ffc9a7635b5e139f60e01b604051602401611ceb91906153ba565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611d39919061541c565b6000604051808303816000865af19150503d8060008114611d76576040519150601f19603f3d011682016040523d82523d6000602084013e611d7b565b606091505b508092508193505050818015611d92575060008151115b8015611dae575080806020019051810190611dad9190615448565b5b92505b5050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611e28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1f906154e7565b60405180910390fd5b8151835114611e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6390615579565b60405180910390fd5b6000611e76611bb2565b9050611e878160008787878761357a565b60005b8451811015611f4457838181518110611ea657611ea5614d76565b5b602002602001015160666000878481518110611ec557611ec4614d76565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254611f2a9190615599565b925050819055508080611f3c90614e11565b915050611e8a565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611fbc9291906155ef565b60405180910390a4611fd38160008787878761365d565b5050505050565b815183511461201e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201590615579565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561208e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208590615698565b60405180910390fd5b6000612098611bb2565b90506120a881878787878761357a565b60005b84518110156122655760008582815181106120c9576120c8614d76565b5b6020026020010151905060008583815181106120e8576120e7614d76565b5b6020026020010151905060006066600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015490508181101561218d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121849061572a565b60405180910390fd5b8181036066600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550816066600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461224a9190615599565b925050819055505050508061225e90614e11565b90506120ab565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122dc9291906155ef565b60405180910390a46122f281878787878761365d565b505050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060019054906101000a900460ff16156124375760018260ff161480156123ef57506123ed30613835565b155b61242e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612425906157bc565b60405180910390fd5b600090506124ab565b8160ff1660008054906101000a900460ff1660ff161061248c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612483906157bc565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b6124b981613858565b50565b565b600060019054906101000a900460ff1661250d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125049061584e565b60405180910390fd5b612515613872565b565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257e906158e0565b60405180910390fd5b80518251146125cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c290615579565b60405180910390fd5b60006125d5611bb2565b90506125f58185600086866040518060200160405280600081525061357a565b60005b835181101561274a57600084828151811061261657612615614d76565b5b60200260200101519050600084838151811061263557612634614d76565b5b6020026020010151905060006066600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050818110156126da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126d190615972565b60405180910390fd5b8181036066600085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550505050808061274290614e11565b9150506125f8565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516127c29291906155ef565b60405180910390a450505050565b6127d8611bb2565b73ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061286c5750612836611bb2565b73ffffffffffffffffffffffffffffffffffffffff16612854610d64565b73ffffffffffffffffffffffffffffffffffffffff16145b6128ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a290614d56565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561291b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612912906158e0565b60405180910390fd5b6000612925611bb2565b905060006066600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116129bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129b490615a04565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1660696000858152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612a6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6690615a96565b60405180910390fd5b60016066600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254612ad39190615ab6565b92505081905550600060696000858152602001908152602001600020600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628686604051612bb5929190615aea565b60405180910390a450505050565b612bcb611bb2565b73ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480612c5f5750612c29611bb2565b73ffffffffffffffffffffffffffffffffffffffff16612c47610d64565b73ffffffffffffffffffffffffffffffffffffffff16145b612c9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c9590614d56565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d05906154e7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660696000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612dc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612db890615b85565b60405180910390fd5b6000612dcb611bb2565b905060016066600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254612e319190615599565b925050819055508360696000858152602001908152602001600020600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628686604051612f12929190615aea565b60405180910390a4612f38816000868686604051806020016040528060008152506138d3565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415612fae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fa5906154e7565b60405180910390fd5b8251845114612ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe990615579565b60405180910390fd5b8151845114613036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161302d90615c17565b60405180910390fd5b6000613040611bb2565b90506130518160008888888761357a565b60005b85518110156131d7578481815181106130705761306f614d76565b5b60200260200101516066600088848151811061308f5761308e614d76565b5b6020026020010151815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060008482815181106130fe576130fd614d76565b5b602002602001015167ffffffffffffffff16146131c45783818151811061312857613127614d76565b5b60200260200101516066600088848151811061314757613146614d76565b5b6020026020010151815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b80806131cf90614e11565b915050613054565b508573ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fa15ec7f7e8016eff0ab0ab65aa6282af177b24e430d558af0ef94e2bdd6a738f888860405161324f9291906155ef565b60405180910390a46132668160008888888761365d565b505050505050565b60008373ffffffffffffffffffffffffffffffffffffffff1660696000858152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161490509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561335c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161335390615698565b60405180910390fd5b6000613366611bb2565b905061338681878761337788613aab565b61338088613aab565b8761357a565b60006066600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905083811015613421576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134189061572a565b60405180910390fd5b8381036066600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550836066600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546134de9190615599565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161355b929190615aea565b60405180910390a4613571828888888888613b25565b50505050505050565b613582611bb2565b73ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061361657506135e0611bb2565b73ffffffffffffffffffffffffffffffffffffffff166135fe610d64565b73ffffffffffffffffffffffffffffffffffffffff16145b613655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161364c90614d56565b60405180910390fd5b505050505050565b61367c8473ffffffffffffffffffffffffffffffffffffffff16613cfd565b1561382d578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016136c2959493929190615c81565b6020604051808303816000875af19250505080156136fe57506040513d601f19601f820116820180604052508101906136fb9190615cfe565b60015b6137a45761370a615d38565b806308c379a01415613767575061371f615d5a565b8061372a5750613769565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161375e9190614219565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161379b90615e62565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461382b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161382290615ef4565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b806068908051906020019061386e929190613d10565b5050565b600060019054906101000a900460ff166138c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138b89061584e565b60405180910390fd5b6138d16138cc611bb2565b6122fa565b565b6138f28473ffffffffffffffffffffffffffffffffffffffff16613cfd565b15613aa3578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401613938959493929190615f14565b6020604051808303816000875af192505050801561397457506040513d601f19601f820116820180604052508101906139719190615cfe565b60015b613a1a57613980615d38565b806308c379a014156139dd5750613995615d5a565b806139a057506139df565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139d49190614219565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a1190615e62565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a9890615ef4565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115613aca57613ac9613f96565b5b604051908082528060200260200182016040528015613af85781602001602082028036833780820191505090505b5090508281600081518110613b1057613b0f614d76565b5b60200260200101818152505080915050919050565b613b448473ffffffffffffffffffffffffffffffffffffffff16613cfd565b15613cf5578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401613b8a959493929190615f14565b6020604051808303816000875af1925050508015613bc657506040513d601f19601f82011682018060405250810190613bc39190615cfe565b60015b613c6c57613bd2615d38565b806308c379a01415613c2f5750613be7615d5a565b80613bf25750613c31565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c269190614219565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c6390615e62565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613cf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613cea90615ef4565b60405180910390fd5b505b505050505050565b600080823b905060008111915050919050565b828054613d1c90614e89565b90600052602060002090601f016020900481019282613d3e5760008555613d85565b82601f10613d5757805160ff1916838001178555613d85565b82800160010185558215613d85579182015b82811115613d84578251825591602001919060010190613d69565b5b509050613d929190613d96565b5090565b5b80821115613daf576000816000905550600101613d97565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613df282613dc7565b9050919050565b613e0281613de7565b8114613e0d57600080fd5b50565b600081359050613e1f81613df9565b92915050565b6000819050919050565b613e3881613e25565b8114613e4357600080fd5b50565b600081359050613e5581613e2f565b92915050565b60008060408385031215613e7257613e71613dbd565b5b6000613e8085828601613e10565b9250506020613e9185828601613e46565b9150509250929050565b613ea481613e25565b82525050565b6000602082019050613ebf6000830184613e9b565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613efa81613ec5565b8114613f0557600080fd5b50565b600081359050613f1781613ef1565b92915050565b600060208284031215613f3357613f32613dbd565b5b6000613f4184828501613f08565b91505092915050565b60008115159050919050565b613f5f81613f4a565b82525050565b6000602082019050613f7a6000830184613f56565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613fce82613f85565b810181811067ffffffffffffffff82111715613fed57613fec613f96565b5b80604052505050565b6000614000613db3565b905061400c8282613fc5565b919050565b600067ffffffffffffffff82111561402c5761402b613f96565b5b602082029050602081019050919050565b600080fd5b600061405561405084614011565b613ff6565b905080838252602082019050602084028301858111156140785761407761403d565b5b835b818110156140a1578061408d8882613e46565b84526020840193505060208101905061407a565b5050509392505050565b600082601f8301126140c0576140bf613f80565b5b81356140d0848260208601614042565b91505092915050565b6000806000606084860312156140f2576140f1613dbd565b5b600061410086828701613e10565b935050602084013567ffffffffffffffff81111561412157614120613dc2565b5b61412d868287016140ab565b925050604084013567ffffffffffffffff81111561414e5761414d613dc2565b5b61415a868287016140ab565b9150509250925092565b60006020828403121561417a57614179613dbd565b5b600061418884828501613e46565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156141cb5780820151818401526020810190506141b0565b838111156141da576000848401525b50505050565b60006141eb82614191565b6141f5818561419c565b93506142058185602086016141ad565b61420e81613f85565b840191505092915050565b6000602082019050818103600083015261423381846141e0565b905092915050565b6000819050919050565b600061426061425b61425684613dc7565b61423b565b613dc7565b9050919050565b600061427282614245565b9050919050565b600061428482614267565b9050919050565b61429481614279565b82525050565b60006020820190506142af600083018461428b565b92915050565b600080fd5b600067ffffffffffffffff8211156142d5576142d4613f96565b5b6142de82613f85565b9050602081019050919050565b82818337600083830152505050565b600061430d614308846142ba565b613ff6565b905082815260208101848484011115614329576143286142b5565b5b6143348482856142eb565b509392505050565b600082601f83011261435157614350613f80565b5b81356143618482602086016142fa565b91505092915050565b600080600080600060a0868803121561438657614385613dbd565b5b600061439488828901613e10565b95505060206143a588828901613e10565b945050604086013567ffffffffffffffff8111156143c6576143c5613dc2565b5b6143d2888289016140ab565b935050606086013567ffffffffffffffff8111156143f3576143f2613dc2565b5b6143ff888289016140ab565b925050608086013567ffffffffffffffff8111156144205761441f613dc2565b5b61442c8882890161433c565b9150509295509295909350565b60006020828403121561444f5761444e613dbd565b5b600061445d84828501613e10565b91505092915050565b600067ffffffffffffffff82111561448157614480613f96565b5b602082029050602081019050919050565b60006144a56144a084614466565b613ff6565b905080838252602082019050602084028301858111156144c8576144c761403d565b5b835b818110156144f157806144dd8882613e10565b8452602084019350506020810190506144ca565b5050509392505050565b600082601f8301126145105761450f613f80565b5b8135614520848260208601614492565b91505092915050565b600080604083850312156145405761453f613dbd565b5b600083013567ffffffffffffffff81111561455e5761455d613dc2565b5b61456a858286016144fb565b925050602083013567ffffffffffffffff81111561458b5761458a613dc2565b5b614597858286016140ab565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6145d681613e25565b82525050565b60006145e883836145cd565b60208301905092915050565b6000602082019050919050565b600061460c826145a1565b61461681856145ac565b9350614621836145bd565b8060005b8381101561465257815161463988826145dc565b9750614644836145f4565b925050600181019050614625565b5085935050505092915050565b600060208201905081810360008301526146798184614601565b905092915050565b61468a81613de7565b82525050565b60006020820190506146a56000830184614681565b92915050565b600080600080600060a086880312156146c7576146c6613dbd565b5b60006146d588828901613e10565b955050602086013567ffffffffffffffff8111156146f6576146f5613dc2565b5b614702888289016140ab565b945050604086013567ffffffffffffffff81111561472357614722613dc2565b5b61472f888289016140ab565b935050606086013567ffffffffffffffff8111156147505761474f613dc2565b5b61475c888289016140ab565b925050608086013567ffffffffffffffff81111561477d5761477c613dc2565b5b614789888289016140ab565b9150509295509295909350565b61479f81613f4a565b81146147aa57600080fd5b50565b6000813590506147bc81614796565b92915050565b600080604083850312156147d9576147d8613dbd565b5b60006147e785828601613e10565b92505060206147f8858286016147ad565b9150509250929050565b600080fd5b60008083601f84011261481d5761481c613f80565b5b8235905067ffffffffffffffff81111561483a57614839614802565b5b6020830191508360808202830111156148565761485561403d565b5b9250929050565b60008060006040848603121561487657614875613dbd565b5b600061488486828701613e10565b935050602084013567ffffffffffffffff8111156148a5576148a4613dc2565b5b6148b186828701614807565b92509250509250925092565b6000806000606084860312156148d6576148d5613dbd565b5b60006148e486828701613e10565b93505060206148f586828701613e46565b925050604061490686828701613e46565b9150509250925092565b600067ffffffffffffffff82169050919050565b61492d81614910565b82525050565b60006020820190506149486000830184614924565b92915050565b6000806000806080858703121561496857614967613dbd565b5b600061497687828801613e10565b945050602061498787828801613e10565b935050604085013567ffffffffffffffff8111156149a8576149a7613dc2565b5b6149b4878288016140ab565b925050606085013567ffffffffffffffff8111156149d5576149d4613dc2565b5b6149e1878288016140ab565b91505092959194509250565b60008060408385031215614a0457614a03613dbd565b5b6000614a1285828601613e10565b9250506020614a2385828601613e10565b9150509250929050565b600080600080600060a08688031215614a4957614a48613dbd565b5b6000614a5788828901613e10565b9550506020614a6888828901613e10565b9450506040614a7988828901613e46565b9350506060614a8a88828901613e46565b925050608086013567ffffffffffffffff811115614aab57614aaa613dc2565b5b614ab78882890161433c565b9150509295509295909350565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000614b20602b8361419c565b9150614b2b82614ac4565b604082019050919050565b60006020820190508181036000830152614b4f81614b13565b9050919050565b614b5f81614910565b8114614b6a57600080fd5b50565b600081519050614b7c81614b56565b92915050565b600060208284031215614b9857614b97613dbd565b5b6000614ba684828501614b6d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614be982614910565b9150614bf483614910565b925082821015614c0757614c06614baf565b5b828203905092915050565b6000614c1d82614910565b9150614c2883614910565b92508267ffffffffffffffff03821115614c4557614c44614baf565b5b828201905092915050565b6000614c5b82613e25565b9150614c6683613e25565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614c9f57614c9e614baf565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614ce482613e25565b9150614cef83613e25565b925082614cff57614cfe614caa565b5b828204905092915050565b7f63616c6c6572206973206e6f7420706f6f6c0000000000000000000000000000600082015250565b6000614d4060128361419c565b9150614d4b82614d0a565b602082019050919050565b60006020820190508181036000830152614d6f81614d33565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f455243373231206e6f7420616363657074656400000000000000000000000000600082015250565b6000614ddb60138361419c565b9150614de682614da5565b602082019050919050565b60006020820190508181036000830152614e0a81614dce565b9050919050565b6000614e1c82613e25565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614e4f57614e4e614baf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614ea157607f821691505b60208210811415614eb557614eb4614e5a565b5b50919050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b6000614f1760328361419c565b9150614f2282614ebb565b604082019050919050565b60006020820190508181036000830152614f4681614f0a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614f8360208361419c565b9150614f8e82614f4d565b602082019050919050565b60006020820190508181036000830152614fb281614f76565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b600061501560298361419c565b915061502082614fb9565b604082019050919050565b6000602082019050818103600083015261504481615008565b9050919050565b6000819050919050565b600060ff82169050919050565b600061507d6150786150738461504b565b61423b565b615055565b9050919050565b61508d81615062565b82525050565b60006020820190506150a86000830184615084565b92915050565b7f63616e6e6f74207472616e736665722045524337323120746f6b656e00000000600082015250565b60006150e4601c8361419c565b91506150ef826150ae565b602082019050919050565b60006020820190508181036000830152615113816150d7565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b600061517660298361419c565b91506151818261511a565b604082019050919050565b600060208201905081810360008301526151a581615169565b9050919050565b7f302d6c656e206172677300000000000000000000000000000000000000000000600082015250565b60006151e2600a8361419c565b91506151ed826151ac565b602082019050919050565b60006020820190508181036000830152615211816151d5565b9050919050565b60006020828403121561522e5761522d613dbd565b5b600061523c848285016147ad565b91505092915050565b60008135905061525481614b56565b92915050565b6000602082840312156152705761526f613dbd565b5b600061527e84828501615245565b91505092915050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b60006152e360298361419c565b91506152ee82615287565b604082019050919050565b60006020820190508181036000830152615312816152d6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061537560268361419c565b915061538082615319565b604082019050919050565b600060208201905081810360008301526153a481615368565b9050919050565b6153b481613ec5565b82525050565b60006020820190506153cf60008301846153ab565b92915050565b600081519050919050565b600081905092915050565b60006153f6826153d5565b61540081856153e0565b93506154108185602086016141ad565b80840191505092915050565b600061542882846153eb565b915081905092915050565b60008151905061544281614796565b92915050565b60006020828403121561545e5761545d613dbd565b5b600061546c84828501615433565b91505092915050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006154d160218361419c565b91506154dc82615475565b604082019050919050565b60006020820190508181036000830152615500816154c4565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b600061556360288361419c565b915061556e82615507565b604082019050919050565b6000602082019050818103600083015261559281615556565b9050919050565b60006155a482613e25565b91506155af83613e25565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156155e4576155e3614baf565b5b828201905092915050565b600060408201905081810360008301526156098185614601565b9050818103602083015261561d8184614601565b90509392505050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061568260258361419c565b915061568d82615626565b604082019050919050565b600060208201905081810360008301526156b181615675565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000615714602a8361419c565b915061571f826156b8565b604082019050919050565b6000602082019050818103600083015261574381615707565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006157a6602e8361419c565b91506157b18261574a565b604082019050919050565b600060208201905081810360008301526157d581615799565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000615838602b8361419c565b9150615843826157dc565b604082019050919050565b600060208201905081810360008301526158678161582b565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006158ca60238361419c565b91506158d58261586e565b604082019050919050565b600060208201905081810360008301526158f9816158bd565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b600061595c60248361419c565b915061596782615900565b604082019050919050565b6000602082019050818103600083015261598b8161594f565b9050919050565b7f455243313135353a206275726e20746f6b656e4964206578636565647320626160008201527f6c616e6365000000000000000000000000000000000000000000000000000000602082015250565b60006159ee60258361419c565b91506159f982615992565b604082019050919050565b60006020820190508181036000830152615a1d816159e1565b9050919050565b7f4552433732313a20616c72656164792062656c6f6e677320746f20616e6f746860008201527f6572206164647265737300000000000000000000000000000000000000000000602082015250565b6000615a80602a8361419c565b9150615a8b82615a24565b604082019050919050565b60006020820190508181036000830152615aaf81615a73565b9050919050565b6000615ac182613e25565b9150615acc83613e25565b925082821015615adf57615ade614baf565b5b828203905092915050565b6000604082019050615aff6000830185613e9b565b615b0c6020830184613e9b565b9392505050565b7f45524337323120616c7265616479206f776e656420627920616e6f746865722060008201527f7573657200000000000000000000000000000000000000000000000000000000602082015250565b6000615b6f60248361419c565b9150615b7a82615b13565b604082019050919050565b60006020820190508181036000830152615b9e81615b62565b9050919050565b7f455243313135353a2069647320616e64207072696365496e6465786573206c6560008201527f6e206d69736d6174636800000000000000000000000000000000000000000000602082015250565b6000615c01602a8361419c565b9150615c0c82615ba5565b604082019050919050565b60006020820190508181036000830152615c3081615bf4565b9050919050565b600082825260208201905092915050565b6000615c53826153d5565b615c5d8185615c37565b9350615c6d8185602086016141ad565b615c7681613f85565b840191505092915050565b600060a082019050615c966000830188614681565b615ca36020830187614681565b8181036040830152615cb58186614601565b90508181036060830152615cc98185614601565b90508181036080830152615cdd8184615c48565b90509695505050505050565b600081519050615cf881613ef1565b92915050565b600060208284031215615d1457615d13613dbd565b5b6000615d2284828501615ce9565b91505092915050565b60008160e01c9050919050565b600060033d1115615d575760046000803e615d54600051615d2b565b90505b90565b600060443d1015615d6a57615ded565b615d72613db3565b60043d036004823e80513d602482011167ffffffffffffffff82111715615d9a575050615ded565b808201805167ffffffffffffffff811115615db85750505050615ded565b80602083010160043d038501811115615dd5575050505050615ded565b615de482602001850186613fc5565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000615e4c60348361419c565b9150615e5782615df0565b604082019050919050565b60006020820190508181036000830152615e7b81615e3f565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000615ede60288361419c565b9150615ee982615e82565b604082019050919050565b60006020820190508181036000830152615f0d81615ed1565b9050919050565b600060a082019050615f296000830188614681565b615f366020830187614681565b615f436040830186613e9b565b615f506060830185613e9b565b8181036080830152615f628184615c48565b9050969550505050505056fe68747470733a2f2f696e66696e6974792e65786368616e67652f742f7b746f6b656e416464726573737d2e6a736f6ea2646970667358221220031bed4e4010ae6945742d5ec179dc6bff7aa466102e88d4c53aa9a1fcf4dd9564736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setPool(address)": {
        "details": "set pool contract for permission check, and interest bearing balance calculation"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/InfinityToken.sol:InfinityToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/InfinityToken.sol:InfinityToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 549,
        "contract": "contracts/InfinityToken.sol:InfinityToken",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/InfinityToken.sol:InfinityToken",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/InfinityToken.sol:InfinityToken",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2013,
        "contract": "contracts/InfinityToken.sol:InfinityToken",
        "label": "pool",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IInfinityPool)3512"
      },
      {
        "astId": 2046,
        "contract": "contracts/InfinityToken.sol:InfinityToken",
        "label": "_balances",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(WalletContent)2039_storage))"
      },
      {
        "astId": 2052,
        "contract": "contracts/InfinityToken.sol:InfinityToken",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2054,
        "contract": "contracts/InfinityToken.sol:InfinityToken",
        "label": "_uri",
        "offset": 0,
        "slot": "104",
        "type": "t_string_storage"
      },
      {
        "astId": 3310,
        "contract": "contracts/InfinityToken.sol:InfinityToken",
        "label": "_balancesNFT",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IInfinityPool)3512": {
        "encoding": "inplace",
        "label": "contract IInfinityPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(WalletContent)2039_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct InfinityTokenERC1155.WalletContent)",
        "numberOfBytes": "32",
        "value": "t_struct(WalletContent)2039_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(WalletContent)2039_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct InfinityTokenERC1155.WalletContent))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(WalletContent)2039_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(WalletContent)2039_storage": {
        "encoding": "inplace",
        "label": "struct InfinityTokenERC1155.WalletContent",
        "members": [
          {
            "astId": 2036,
            "contract": "contracts/InfinityToken.sol:InfinityToken",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2038,
            "contract": "contracts/InfinityToken.sol:InfinityToken",
            "label": "priceIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}