{
  "address": "0x25d0AF08D4D75E6c9480b6ef286Aa05946ab8AE3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IInfinityPool.TokenTransfer[]",
          "name": "transfers",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "action",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "parameters",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IInfinityPool.Action[]",
          "name": "actions",
          "type": "tuple[]"
        }
      ],
      "name": "DepositsOrActionsTriggered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "protocolAddress",
          "type": "address"
        }
      ],
      "name": "LiquidationProtocolRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "key",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "value",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct IInfinityPool.PriceIndex[]",
          "name": "priceIndexes",
          "type": "tuple[]"
        }
      ],
      "name": "PriceIndexesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "key",
              "type": "uint64"
            },
            {
              "internalType": "int64",
              "name": "value",
              "type": "int64"
            }
          ],
          "indexed": false,
          "internalType": "struct IInfinityPool.ProductVariable[]",
          "name": "variables",
          "type": "tuple[]"
        }
      ],
      "name": "ProductVariablesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ILiquidationProtocol.LiquidatedAmount[]",
          "name": "amounts",
          "type": "tuple[]"
        }
      ],
      "name": "ServerLiquidateSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IInfinityPool.TokenTransfer[]",
          "name": "tokenTranfers",
          "type": "tuple[]"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IInfinityPool.TokenTransfer[]",
          "name": "transfers",
          "type": "tuple[]"
        }
      ],
      "name": "WithdrawalRequested",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "action",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "parameters",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IInfinityPool.Action[]",
          "name": "actions",
          "type": "tuple[]"
        }
      ],
      "name": "action",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IInfinityPool.TokenTransfer[]",
          "name": "tokenTransfers",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "action",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "parameters",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IInfinityPool.Action[]",
          "name": "actions",
          "type": "tuple[]"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addrPoolToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addrWETH",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolToken",
      "outputs": [
        {
          "internalType": "contract IInfinityToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "priceIndex",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "id",
          "type": "uint64"
        }
      ],
      "name": "productVariable",
      "outputs": [
        {
          "internalType": "int64",
          "name": "value",
          "type": "int64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "protocolId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "protocolAddress",
          "type": "address"
        }
      ],
      "name": "registerLiquidationProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IInfinityPool.TokenTransfer[]",
          "name": "tokenTransfers",
          "type": "tuple[]"
        }
      ],
      "name": "requestWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "protocolId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "clientAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenFrom",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenTo",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "poolFee",
              "type": "uint24"
            }
          ],
          "internalType": "struct ILiquidationProtocol.LiquidateParams",
          "name": "lparams",
          "type": "tuple"
        }
      ],
      "name": "serverLiquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "protocolId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "clientAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenFrom",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenTo",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "poolFee",
              "type": "uint24"
            }
          ],
          "internalType": "struct ILiquidationProtocol.LiquidateParams",
          "name": "lparams",
          "type": "tuple"
        }
      ],
      "name": "serverLiquidateERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IInfinityPool.TokenTransfer[]",
          "name": "tokenTransfers",
          "type": "tuple[]"
        }
      ],
      "name": "serverTransferFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "clientAddresses",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isERC721",
              "type": "bool"
            },
            {
              "internalType": "uint64",
              "name": "priceIndex",
              "type": "uint64"
            }
          ],
          "internalType": "struct IInfinityPool.TokenUpdate[][]",
          "name": "tokenUpdates",
          "type": "tuple[][]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "key",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "value",
              "type": "uint64"
            }
          ],
          "internalType": "struct IInfinityPool.PriceIndex[]",
          "name": "_priceIndexes",
          "type": "tuple[]"
        }
      ],
      "name": "serverUpdateBalances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "key",
              "type": "uint64"
            },
            {
              "internalType": "int64",
              "name": "value",
              "type": "int64"
            }
          ],
          "internalType": "struct IInfinityPool.ProductVariable[]",
          "name": "_productVariables",
          "type": "tuple[]"
        }
      ],
      "name": "serverUpdateProductVariables",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addrPoolToken",
          "type": "address"
        }
      ],
      "name": "setInfinityToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addrWETH",
          "type": "address"
        }
      ],
      "name": "setWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "v",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9b4854b1f2c2ffc90596bf4e219aaddd6259662c12cce02fb094797d0d15bafe",
  "receipt": {
    "to": null,
    "from": "0x0858e5aCF759EC6e071f7CedC177f4085c722b8B",
    "contractAddress": "0x25d0AF08D4D75E6c9480b6ef286Aa05946ab8AE3",
    "transactionIndex": 45,
    "gasUsed": "4711124",
    "logsBloom": "0x
    "blockHash": "0xcef6d28fe4379c9c28d9a8ff549c082f6fde920202cde27da7c1435fecd7666e",
    "transactionHash": "0x9b4854b1f2c2ffc90596bf4e219aaddd6259662c12cce02fb094797d0d15bafe",
    "logs": [],
    "blockNumber": 7766133,
    "cumulativeGasUsed": "11340246",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "25cace45b169901cbab97bba123e58c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IInfinityPool.TokenTransfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"action\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"parameters\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct IInfinityPool.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"name\":\"DepositsOrActionsTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocolAddress\",\"type\":\"address\"}],\"name\":\"LiquidationProtocolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct IInfinityPool.PriceIndex[]\",\"name\":\"priceIndexes\",\"type\":\"tuple[]\"}],\"name\":\"PriceIndexesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"key\",\"type\":\"uint64\"},{\"internalType\":\"int64\",\"name\":\"value\",\"type\":\"int64\"}],\"indexed\":false,\"internalType\":\"struct IInfinityPool.ProductVariable[]\",\"name\":\"variables\",\"type\":\"tuple[]\"}],\"name\":\"ProductVariablesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ILiquidationProtocol.LiquidatedAmount[]\",\"name\":\"amounts\",\"type\":\"tuple[]\"}],\"name\":\"ServerLiquidateSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IInfinityPool.TokenTransfer[]\",\"name\":\"tokenTranfers\",\"type\":\"tuple[]\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IInfinityPool.TokenTransfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"action\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"parameters\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IInfinityPool.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"name\":\"action\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IInfinityPool.TokenTransfer[]\",\"name\":\"tokenTransfers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"action\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"parameters\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IInfinityPool.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addrPoolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addrWETH\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"contract IInfinityToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"priceIndex\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"name\":\"productVariable\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"value\",\"type\":\"int64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"protocolId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"protocolAddress\",\"type\":\"address\"}],\"name\":\"registerLiquidationProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IInfinityPool.TokenTransfer[]\",\"name\":\"tokenTransfers\",\"type\":\"tuple[]\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"protocolId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"internalType\":\"struct ILiquidationProtocol.LiquidateParams\",\"name\":\"lparams\",\"type\":\"tuple\"}],\"name\":\"serverLiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"protocolId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"internalType\":\"struct ILiquidationProtocol.LiquidateParams\",\"name\":\"lparams\",\"type\":\"tuple\"}],\"name\":\"serverLiquidateERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IInfinityPool.TokenTransfer[]\",\"name\":\"tokenTransfers\",\"type\":\"tuple[]\"}],\"name\":\"serverTransferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"clientAddresses\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"priceIndex\",\"type\":\"uint64\"}],\"internalType\":\"struct IInfinityPool.TokenUpdate[][]\",\"name\":\"tokenUpdates\",\"type\":\"tuple[][]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"internalType\":\"struct IInfinityPool.PriceIndex[]\",\"name\":\"_priceIndexes\",\"type\":\"tuple[]\"}],\"name\":\"serverUpdateBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"key\",\"type\":\"uint64\"},{\"internalType\":\"int64\",\"name\":\"value\",\"type\":\"int64\"}],\"internalType\":\"struct IInfinityPool.ProductVariable[]\",\"name\":\"_productVariables\",\"type\":\"tuple[]\"}],\"name\":\"serverUpdateProductVariables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addrPoolToken\",\"type\":\"address\"}],\"name\":\"setInfinityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addrWETH\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"serverTransferFunds(address,(address,uint256)[])\":{\"details\":\"serverTransferFunds only transfers external tokens out, does not check nor update internal balance\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InfinityPool.sol\":\"InfinityPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/InfinityPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"./interfaces/IInfinityPool.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IInfinityToken.sol\\\";\\nimport \\\"./interfaces/ILiquidationProtocol.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/ERC721Validator.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract InfinityPool is IERC721Receiver, IInfinityPool, Initializable, ContextUpgradeable, OwnableUpgradeable {\\n\\n\\tmapping(uint64=>address) liquidationProtocolAddresses; // mapping of addresses of liquidation protocols\\n\\tmapping(uint64=>int64) productVariables;\\n\\tmapping(uint=>uint64) priceIndexes; // 13 decimals\\n\\tIInfinityToken public poolToken;\\n\\tIWETH public weth;\\n\\t// ether tokenId = 0\\n\\n\\tfunction version() public pure returns(uint v){\\n\\t\\tv = 15;\\n\\t}\\n\\n\\tfunction initialize(address _addrPoolToken, address _addrWETH) public initializer{\\n\\t\\t_setInfinityToken(_addrPoolToken);\\n\\t\\t_setWETH(_addrWETH);\\n\\t\\t__Ownable_init();\\n\\t}\\n\\tfunction setInfinityToken(address _addrPoolToken) public onlyOwner {\\n\\t\\t// require(_addrPoolToken != address(0), \\\"poolToken 0\\\");\\n\\t\\t_setInfinityToken(_addrPoolToken);\\n\\t}\\n\\tfunction _setInfinityToken(address _addrPoolToken) internal {\\n\\t\\tpoolToken = IInfinityToken(_addrPoolToken);\\n\\t}\\n\\tfunction setWETH(address _addrWETH) public onlyOwner {\\n\\t\\t// require(_addrWETH != address(0), \\\"addrWETH 0\\\");\\n\\t\\t_setWETH(_addrWETH);\\n\\t}\\n\\tfunction _setWETH(address _addrWETH) internal {\\n\\t\\tweth = IWETH(_addrWETH);\\n\\t}\\n\\n\\tfunction deposit(\\n\\t\\tTokenTransfer[] memory tokenTransfers,\\n\\t\\tAction[] calldata actions\\n\\t) external payable override {\\n\\t\\trequire(msg.value>0||tokenTransfers.length>0||actions.length>0,\\\"0-len args\\\");\\n\\t\\trequire(tokenTransfers.length<1e2,\\\"Token limit\\\");\\n\\t\\trequire(actions.length<1e2,\\\"Action limit\\\");\\n\\n\\t\\tTokenTransfer[] memory _tt = new TokenTransfer[](tokenTransfers.length+(msg.value>0?1:0));\\n\\t// take tokens\\n\\t\\tfor(uint i=0;i<tokenTransfers.length;i++){\\n\\t\\t\\tuint256 tokenAmount = tokenTransfers[i].amount;\\n\\t\\t\\t// TODO check if ether would overflow in iToken\\n\\t\\t\\tuint balance = TransferHelper.balanceOf(tokenTransfers[i].token,address(_msgSender()));\\n\\t\\t\\tif(ERC721Validator.isERC721(tokenTransfers[i].token)){\\n\\t\\t\\t\\trequire(ERC721Validator.isERC721Owner(tokenTransfers[i].token,address(_msgSender()),tokenAmount),\\\"Not ERC721 Owner\\\");\\n\\t\\t\\t\\tTransferHelper.safeTransferFromERC721(tokenTransfers[i].token,_msgSender(),address(this),tokenAmount);\\n\\t\\t\\t}else{\\n\\t\\t\\t\\trequire(balance>=tokenAmount,\\\"Insufficient balance\\\");\\n\\t\\t\\t\\tTransferHelper.safeTransferFrom(tokenTransfers[i].token,_msgSender(),address(this),tokenAmount);\\n\\t\\t\\t}\\n\\t\\t\\t_tt[i] = tokenTransfers[i];\\n\\t\\t}\\n\\t\\t// wrap eth\\n\\t\\tif(msg.value>0){\\n\\t\\t\\tweth.deposit{value:msg.value}();\\n\\t\\t\\t// new array \\n\\t\\t\\t_tt[tokenTransfers.length] = TokenTransfer(address(weth),msg.value);\\n\\t\\t}\\n\\t\\temit DepositsOrActionsTriggered(\\n\\t\\t\\t_msgSender(), _tt, actions\\n\\t\\t);\\n\\t}\\n\\n\\tfunction requestWithdraw(TokenTransfer[] calldata tokenTransfers) external override{\\n\\t\\trequire(tokenTransfers.length>0,\\\"0-len args\\\");\\n\\t\\t/* only do checkings */\\n\\t\\tfor(uint i=0;i<tokenTransfers.length;i++){\\n\\t\\t\\tif(ERC721Validator.isERC721(tokenTransfers[i].token)){\\n\\t\\t\\t\\trequire(poolToken.ifUserTokenExistsERC721(_msgSender(), uint256(uint160(tokenTransfers[i].token)), tokenTransfers[i].amount),\\\"Not ERC721 Owner\\\");\\n\\t\\t\\t}else{\\n\\t\\t\\t\\trequire(poolToken.balanceOf(_msgSender(),uint256(uint160(tokenTransfers[i].token)))>=tokenTransfers[i].amount,\\\"Insufficient Token\\\");\\n\\t\\t\\t\\trequire(TransferHelper.balanceOf(tokenTransfers[i].token,address(this))>=tokenTransfers[i].amount,\\\"Insufficient pool Token\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\temit WithdrawalRequested(\\n\\t\\t\\t_msgSender(), tokenTransfers\\n\\t\\t);\\t\\n\\t}\\n\\n\\tfunction action(Action[] calldata actions) external override{\\n\\t\\trequire(actions.length>0,\\\"0-len args\\\");\\n\\t\\trequire(actions.length<1e2,\\\"Action limit\\\");\\n\\t\\temit DepositsOrActionsTriggered(\\n\\t\\t\\t_msgSender(), (new TokenTransfer[](0)), actions\\n\\t\\t);\\t\\n\\t}\\n\\n\\tfunction balanceOf(address clientAddress, uint tokenId) external view override returns (uint balance){\\n\\t\\tbalance = poolToken.balanceOf(clientAddress,tokenId);\\n\\t}\\n\\n\\tfunction priceIndex(uint256 tokenId) external view returns (uint64 value){\\n\\t\\tvalue = priceIndexes[tokenId];\\n\\t}\\n\\tfunction productVariable(uint64 id) external view returns (int64 value){\\n\\t\\tvalue = productVariables[id];\\n\\t}\\n\\n\\t/**\\n\\t * @dev serverTransferFunds only transfers external tokens out, does not check nor update internal balance\\n\\t */\\n\\tfunction serverTransferFunds(address clientAddress, TokenTransfer[] calldata tokenTransfers) onlyOwner external override{\\n\\t\\trequire(tokenTransfers.length>0,\\\"0-len args\\\");\\n\\t\\temit Withdrawal(clientAddress,tokenTransfers);\\n\\t\\t/* do checkings again */\\n\\t\\tfor(uint i=0;i<tokenTransfers.length;i++){\\n\\t\\t\\tif(ERC721Validator.isERC721(tokenTransfers[i].token)){\\n\\t\\t\\t\\t// require(poolToken.ifUserTokenExistsERC721(clientAddress, uint256(uint160(tokenTransfers[i].token)), tokenTransfers[i].amount),\\\"Not ERC721 Owner\\\");\\n\\t\\t\\t\\tTransferHelper.safeApprove(tokenTransfers[i].token,clientAddress,tokenTransfers[i].amount);\\n\\t\\t\\t\\tTransferHelper.safeTransferFromERC721(tokenTransfers[i].token,address(this),clientAddress,tokenTransfers[i].amount);\\n\\t\\t\\t}else{\\n\\t\\t\\t\\t// require(poolToken.balanceOf(clientAddress,uint256(uint160(tokenTransfers[i].token)))>=tokenTransfers[i].amount,\\\"Insufficient Token\\\");\\n\\t\\t\\t\\trequire(TransferHelper.balanceOf(tokenTransfers[i].token,address(this))>=tokenTransfers[i].amount,\\\"Insufficient pool Token\\\");\\n\\t\\t\\t\\tTransferHelper.safeApprove(tokenTransfers[i].token,clientAddress,tokenTransfers[i].amount);\\n\\t\\t\\t\\tTransferHelper.safeTransfer(tokenTransfers[i].token,clientAddress,tokenTransfers[i].amount);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tfunction serverUpdateBalances(\\n\\t\\taddress[] calldata clientAddresses, TokenUpdate[][] calldata tokenUpdates,\\n\\t\\tPriceIndex[] calldata _priceIndexes\\n\\t) onlyOwner external override {\\n\\t\\trequire(clientAddresses.length>0||tokenUpdates.length>0||_priceIndexes.length>0,\\\"0-len args\\\");\\n\\t\\trequire(clientAddresses.length==tokenUpdates.length,\\\"args-len Mismatch\\\");\\n\\t\\tif(_priceIndexes.length>0){\\n\\t\\t\\tfor(uint i=0;i<_priceIndexes.length;i++){\\n\\t\\t\\t\\tpriceIndexes[_priceIndexes[i].key] = _priceIndexes[i].value;\\n\\t\\t\\t}\\n\\t\\t\\temit PriceIndexesUpdated(_priceIndexes);\\n\\t\\t}\\n\\t\\t// TODO require: make sure pool size doesnt change overalld\\n\\t\\tfor(uint i=0;i<clientAddresses.length;i++){\\n\\t\\t\\tpoolToken.updateBalance(clientAddresses[i],tokenUpdates[i]);\\n\\t\\t}\\n\\t}\\n\\tfunction serverUpdateProductVariables(\\n\\t\\tProductVariable[] calldata _productVariables\\n\\t) onlyOwner external override {\\n\\t\\trequire(_productVariables.length>0,\\\"varible length == 0\\\");\\n\\t\\tfor(uint i=0;i<_productVariables.length;i++){\\n\\t\\t\\tproductVariables[_productVariables[i].key] = _productVariables[i].value;\\n\\t\\t}\\n\\t\\temit ProductVariablesUpdated(_productVariables);\\n\\t}\\n\\n\\tfunction registerLiquidationProtocol(\\n\\t\\tuint64 protocolId, address protocolAddress\\n\\t) onlyOwner external override {\\n\\t\\trequire(protocolAddress!=address(0x0),\\\"protocol cannot be 0\\\");\\n\\t\\t// require(liquidationProtocolAddresses[protocolId]==address(0x0),\\\"protocol ID dupl.\\\"); \\n\\t\\tliquidationProtocolAddresses[protocolId] = protocolAddress;\\n\\t\\temit LiquidationProtocolRegistered(protocolAddress);\\n\\t}\\n\\n\\tfunction serverLiquidate(\\n\\t\\tuint64 protocolId, ILiquidationProtocol.LiquidateParams memory lparams\\n\\t) onlyOwner external override {\\n\\t\\taddress protocolAddress = liquidationProtocolAddresses[protocolId];\\n\\t\\trequire(protocolAddress!=address(0x0),\\\"protocol incorrect\\\");\\n\\t\\tILiquidationProtocol protocol = ILiquidationProtocol(protocolAddress);\\n\\t\\tlparams.amountIn = protocol.getApproveAmount(lparams);\\n\\t\\t// for aave: atoken calculation might be ahead of actual balance - amountIn should always be smaller than balance\\n\\t\\t// uint256 balance = IERC20(lparams.tokenFrom).balanceOf(address(this));\\n\\t\\t// if(lparams.amountIn>balance) lparams.amountIn = balance;\\n        TransferHelper.safeApprove(lparams.tokenFrom, address(protocolAddress), lparams.amountIn);\\n        // TransferHelper.safeTransfer(lparams.tokenFrom, address(protocolAddress), lparams.amountIn);\\n        // console.log(\\\"lparams.amountIn\\\");\\n        // console.log(lparams.amountIn);\\n\\t\\tILiquidationProtocol.LiquidatedAmount[] memory amounts = protocol.swap(lparams);\\n\\t\\t// TODO update client wallet?\\n\\t\\temit ServerLiquidateSuccess(lparams.clientAddress,lparams.tokenFrom,lparams.amountIn,amounts);\\n\\t}\\n\\n\\t// Implementing `onERC721Received` so this contract can receive custody of erc721 tokens\\n\\tfunction onERC721Received( address , address , uint256 , bytes calldata ) external pure override returns (bytes4) {\\n    return this.onERC721Received.selector;\\n\\t}\\n\\n\\tfunction serverLiquidateERC721(\\n\\t\\tuint64 protocolId, ILiquidationProtocol.LiquidateParams memory lparams\\n\\t) onlyOwner external override {\\n\\t\\taddress protocolAddress = liquidationProtocolAddresses[protocolId];\\n\\t\\trequire(protocolAddress!=address(0x0),\\\"protocol incorrect\\\");\\n\\t\\tILiquidationProtocol protocol = ILiquidationProtocol(protocolAddress);\\n\\t\\tlparams.amountIn = protocol.getApproveAmount(lparams);\\n    TransferHelper.safeApprove(lparams.tokenFrom, address(protocolAddress), lparams.amountIn);\\n\\t\\tILiquidationProtocol.LiquidatedAmount[] memory amounts = protocol.swap(lparams);\\n\\t\\t// TODO update client wallet?\\n\\t\\temit ServerLiquidateSuccess(lparams.clientAddress,lparams.tokenFrom,lparams.amountIn,amounts);\\n\\t}\\n}\\n\",\"keccak256\":\"0x403cf6a323b1e10a043d084cfd63a8072298a360de90a79ddba4fd0e4f01e766\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @dev contract of the ERC20 standard as defined in the EIP with extended functions.\\n */\\nabstract contract IERC20Extended is IERC20 {\\n    function decimals() public virtual view returns (uint8);\\n}\\n\",\"keccak256\":\"0x9a79b63440673007eb5f814354216eb05a8d0b3c85f8ff438ff0dceddb9fac31\",\"license\":\"MIT\"},\"contracts/interfaces/IInfinityPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"../interfaces/ILiquidationProtocol.sol\\\";\\n\\ninterface IInfinityPool {\\n\\n\\t/*\\n\\n\\taction types\\n\\tpublic static final int SOURCE_WEB = 1;\\n\\tpublic static final int SOURCE_ETHERERUM = 2;\\n\\t\\n\\tpublic static final int TYPE_DEPOSIT = 1;\\n\\tpublic static final int TYPE_WITHDRAWL = 2;\\n\\tpublic static final int TYPE_WITHDRAWL_FAST = 3;\\n\\tpublic static final int TYPE_TRANSFER = 4;\\n\\t\\n\\tpublic static final int TYPE_BORROW = 10;\\n\\tpublic static final int TYPE_PAYBACK = 11;\\n\\t\\n\\tpublic static final int TYPE_CREATE_EXCHANGE_LIQUIDITY_POSITION = 20;\\n\\tpublic static final int TYPE_UPDATE_EXCHANGE_LIQUIDITY_POSITION = 21;\\n\\tpublic static final int TYPE_REMOVE_EXCHANGE_LIQUIDITY_POSITION = 22;\\n\\tpublic static final int TYPE_EXCHANGE = 23;\\n\\tpublic static final int TYPE_EXCHANGE_LARGE_ORDER = 24;\\n\\n\\t*/\\n\\n\\tstruct TokenTransfer {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\tstruct TokenUpdate {\\n\\t\\tuint256 tokenId; // might be prepended with wallet type (e.g. interest bearing wallets)\\n\\t\\tuint256 amount; // absolute value - should always be unsigned\\n\\t\\tbool isERC721; // to avoid high gas usage from checking erc721 \\n\\t\\tuint64 priceIndex;\\n\\t}\\n\\n\\tstruct Action {\\n\\t\\tuint256 action;\\n\\t\\tuint256[] parameters;\\n\\t}\\n\\n\\tstruct ProductVariable {\\n\\t\\tuint64 key;\\n\\t\\tint64 value;\\n\\t}\\n\\n\\tstruct PriceIndex {\\n\\t\\tuint256 key;\\n\\t\\tuint64 value;\\n\\t}\\n\\n\\n\\tevent DepositsOrActionsTriggered(\\n\\t\\taddress indexed sender,\\n\\t\\tTokenTransfer[] transfers, \\n\\t\\tAction[] actions\\n\\t);\\n\\tevent WithdrawalRequested(\\n\\t\\taddress indexed sender,\\n\\t\\tTokenTransfer[] transfers\\n\\t);\\n\\n\\tevent ProductVariablesUpdated(\\n\\t\\tProductVariable[] variables\\n\\t);\\n\\tevent PriceIndexesUpdated(\\n\\t\\tPriceIndex[] priceIndexes\\n\\t);\\n\\n\\tevent LiquidationProtocolRegistered(\\n\\t\\taddress indexed protocolAddress\\n\\t);\\n\\n\\tevent ServerLiquidateSuccess(\\n\\t\\taddress indexed clientAddress,\\n\\t\\taddress tokenFrom,\\n\\t\\tuint256 amountIn,\\n\\t\\tILiquidationProtocol.LiquidatedAmount[] amounts\\n\\t);\\n\\t\\n\\tfunction version() external pure returns(uint v);\\n\\n\\tfunction deposit(\\n\\t\\tTokenTransfer[] memory tokenTranfers,\\n\\t\\tAction[] calldata actions\\n\\t) external payable;\\n\\n\\tfunction requestWithdraw(TokenTransfer[] calldata tokenTranfers) external;\\n\\n\\tfunction action(Action[] calldata actions) external;\\n\\n\\tfunction balanceOf(address clientAddress, uint tokenId) external view returns (uint);\\n\\n\\tfunction productVariable(uint64 id) external view returns (int64);\\n\\n\\tfunction priceIndex(uint256 tokenId) external view returns (uint64);\\n\\n\\tfunction serverTransferFunds(address clientAddress, TokenTransfer[] calldata tokenTranfers) external;\\n\\n\\tfunction serverUpdateBalances(\\n\\t\\taddress[] calldata clientAddresses, TokenUpdate[][] calldata tokenUpdates, \\n\\t\\tPriceIndex[] calldata priceIndexes\\n\\t) external;\\n\\n\\tfunction serverUpdateProductVariables(\\n\\t\\tProductVariable[] calldata productVariables\\n\\t) external;\\n\\n\\tfunction registerLiquidationProtocol(\\n\\t\\tuint64 protocolId, address protocolAddress\\n\\t) external;\\n\\n\\tfunction serverLiquidate(\\n\\t\\tuint64 protocolId, ILiquidationProtocol.LiquidateParams memory lparams\\n\\t) external;\\n\\n\\tfunction serverLiquidateERC721(\\n\\t\\tuint64 protocolId, ILiquidationProtocol.LiquidateParams memory lparams\\n\\t) external;\\n\\n\\t// function serverTransferERC721(address client, address token, uint256 tokenId) external;\\n\\n\\t// function bridgeTransfer();\\n\\n\\tevent Withdrawal(\\n\\t\\taddress indexed clientAddress,\\n\\t\\tTokenTransfer[] tokenTranfers\\n\\t);\\n\\t\\n}\\n\",\"keccak256\":\"0xe8e2b739707ba90192df35af30c949e45a9b7651a4b9471055d9f8dd9a2669df\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IInfinityToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IInfinityPool.sol\\\";\\n\\ninterface IInfinityToken is IERC1155 {\\n\\n    function setPool(address _poolAddr) external;\\n\\n    function priceIndexOf(address clientAddress, uint256 tokenId) external returns(uint64);\\n\\n    function deposit(\\n    \\taddress clientAddress, \\n    \\tuint[] memory _coinIds, \\n    \\tuint[] memory _amounts\\n    ) external;\\n\\n    function withdraw(\\n    \\taddress clientAddress, \\n    \\tuint[] memory _coinIds, \\n    \\tuint[] memory _amounts\\n\\t) external;\\n\\n    function transfer(\\n        address from,\\n        address to,\\n    \\tuint[] memory _coinIds, \\n        uint[] memory _amounts\\n    ) external;\\n\\n    function moveProducts(\\n        address clientAddress,\\n    \\tuint[] memory _mintIds, \\n        uint[] memory _mintAmounts,\\n    \\tuint[] memory _burnIds, \\n        uint[] memory _burnAmounts\\n    ) external ;\\n\\n    function updateBalance(\\n\\t\\taddress clientAddress, IInfinityPool.TokenUpdate[] calldata tokenUpdates\\n    ) external;\\n\\n    function ifUserTokenExistsERC721(\\n        address account,\\n    \\tuint tokenAddress, \\n    \\tuint tokenId\\n    ) external returns(bool exists);\\n    // function depositERC721(\\n    // \\taddress account, \\n    // \\tuint tokenAddress, \\n    // \\tuint tokenId\\n    // ) external;\\n    // function withdrawERC721(\\n    // \\taddress account, \\n    // \\tuint tokenAddress, \\n    // \\tuint tokenId\\n\\t// ) external;\\n    // function transferERC721(\\n    //     address from,\\n    //     address to,\\n    // \\tuint tokenAddress, \\n    //     uint tokenId\\n    // ) external;\\n\\n\\t\\n}\\n\",\"keccak256\":\"0x7e08d529336877c5d5ba39cf4d469b083b239e1e09e697f9509f9bad46aa6006\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ILiquidationProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\ninterface ILiquidationProtocol {\\n\\n\\tstruct LiquidateParams {\\n\\t\\taddress clientAddress;\\n\\t\\taddress tokenFrom;\\n\\t\\taddress tokenTo;\\n\\t\\tuint256 amountIn; // for ERC721: amountIn is tokenId\\n\\t\\tuint24 poolFee;\\n\\t}\\n\\n\\tstruct LiquidatedAmount {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\t\\n\\tfunction swap(\\n\\t\\tLiquidateParams memory lparams\\n\\t) external returns (LiquidatedAmount[] memory amounts);\\n\\t\\n\\tfunction getApproveAmount(\\n\\t\\tLiquidateParams memory lparams\\n\\t) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x501ba4987b4587c629638819a4685451ccf2bf3dad7e8c13b6aa2b5c7cfc5a55\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0x0019415ec5f10ff4113ec70fe9b015f30946e3a3d67efd494c5b85306587ed35\",\"license\":\"MIT\"},\"contracts/libraries/ERC721Validator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.12;\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nlibrary ERC721Validator {\\n\\n    function isERC721(address token) internal returns(bool b){\\n        // bytes4(keccak256(bytes(\\\"supportsInterface(bytes4)\\\")))\\n        (bool success,bytes memory data) = token.call(abi.encodeWithSelector(0x01ffc9a7,bytes4(0x80ac58cd))); // ERC721ID\\n        if(success && data.length > 0 && abi.decode(data, (bool))){\\n            (success,data) = token.call(abi.encodeWithSelector(0x01ffc9a7,bytes4(0x5b5e139f))); // ERC721MetadataID\\n            /**\\n             * DEV no need to check ERC721Enumerable since it's OPTIONAL (only for token to be able to publish its full list of NFTs - see:\\n             * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md#specification\\n             */\\n            // if(success && data.length > 0 && abi.decode(data, (bool))){\\n                // (success,data) = token.call(abi.encodeWithSelector(0x01ffc9a7,bytes4(0x780e9d63))); // ERC721EnumerableID\\n                b = success && data.length > 0 && abi.decode(data, (bool));\\n                // if(b) console.log(\\\"isERC721 ERC721EnumerableID\\\");\\n            // }\\n        }\\n        // console.log(token); console.log(b);\\n    }\\n\\n    function isERC721Owner(address token, address account, uint256 tokenId) internal returns(bool result){\\n        // bytes4(keccak256(bytes('ownerOf(uint256)')));\\n        (, bytes memory data) = token.call(abi.encodeWithSelector(0x6352211e, tokenId));\\n        address owner = abi.decode(data, (address));\\n        result = owner==account;\\n    }\\n\\n}\",\"keccak256\":\"0x7e641d88dcaf98a17fb8fbde9dc51d0f885537e1d397e73c283d35b51e6094c1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nlibrary TransferHelper {\\n    function safeApprove( address token, address to, uint256 value ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require( success && (data.length == 0 || abi.decode(data, (bool))), 'approve failed' );\\n    }\\n\\n    function safeTransferFrom( address token, address from, address to, uint256 value ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require( success && (data.length == 0 || abi.decode(data, (bool))), 'transferFrom failed' );\\n    }\\n\\n    function safeTransfer( address token, address to, uint256 value ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require( success && (data.length == 0 || abi.decode(data, (bool))), 'transfer failed' );\\n    }\\n\\n    function safeTransferFromERC721( address token, address from, address to, uint256 tokenId ) internal {\\n        // bytes4(keccak256(bytes('safeTransferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x42842e0e, from, to, tokenId));\\n        require( success && (data.length == 0 || abi.decode(data, (bool))), 'erc721 safeTransferFrom failed' );\\n    }\\n\\n    function balanceOf( address token, address account ) internal returns (uint256 balance){\\n        // bytes4(keccak256(bytes('balanceOf(address)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x70a08231, account));\\n        require(success,'balanceOf failed');\\n        balance = abi.decode(data, (uint256));\\n    }\\n}\",\"keccak256\":\"0x68697fd31366b389299c51eb23d12c6e6372c0b289616228ae9b70c660126154\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101345760003560e01c806372d646e3116100ab578063b511efd81161006f578063b511efd8146103ec578063c29b1bad14610415578063cbdf382c14610452578063e166f66e1461047d578063f2fde38b146104a6578063ff2cf3cc146104cf57610134565b806372d646e31461032a57806377f069271461035357806380c26e5d1461037c5780638a0570f9146103985780638da5cb5b146103c157610134565b80634b346728116100fd5780634b3467281461024457806354fd4d501461026d5780635b769f3c146102985780636cb166d5146102c1578063715018a6146102ea578063721f0e591461030157610134565b8062fdd58e14610139578063150b7a02146101765780631b76f419146101b35780633fc8cef3146101f0578063485cc9551461021b575b600080fd5b34801561014557600080fd5b50610160600480360381019061015b919061302d565b6104f8565b60405161016d919061307c565b60405180910390f35b34801561018257600080fd5b5061019d600480360381019061019891906130fc565b61059f565b6040516101aa91906131bf565b60405180910390f35b3480156101bf57600080fd5b506101da60048036038101906101d591906131da565b6105b4565b6040516101e7919061322a565b60405180910390f35b3480156101fc57600080fd5b506102056105e5565b60405161021291906132a4565b60405180910390f35b34801561022757600080fd5b50610242600480360381019061023d91906132bf565b61060b565b005b34801561025057600080fd5b5061026b60048036038101906102669190613483565b6106b3565b005b34801561027957600080fd5b50610282610972565b60405161028f919061307c565b60405180910390f35b3480156102a457600080fd5b506102bf60048036038101906102ba91906134c3565b61097b565b005b3480156102cd57600080fd5b506102e860048036038101906102e39190613546565b610a03565b005b3480156102f657600080fd5b506102ff610b40565b005b34801561030d57600080fd5b5061032860048036038101906103239190613695565b610bc8565b005b34801561033657600080fd5b50610351600480360381019061034c9190613483565b610edb565b005b34801561035f57600080fd5b5061037a6004803603810190610375919061379f565b61119a565b005b610396600480360381019061039191906138ff565b6115b3565b005b3480156103a457600080fd5b506103bf60048036038101906103ba91906134c3565b611a60565b005b3480156103cd57600080fd5b506103d6611ae8565b6040516103e3919061398a565b60405180910390f35b3480156103f857600080fd5b50610413600480360381019061040e91906139a5565b611b12565b005b34801561042157600080fd5b5061043c600480360381019061043791906139e5565b611cab565b6040516104499190613a2e565b60405180910390f35b34801561045e57600080fd5b50610467611ce9565b6040516104749190613a6a565b60405180910390f35b34801561048957600080fd5b506104a4600480360381019061049f9190613adb565b611d0f565b005b3480156104b257600080fd5b506104cd60048036038101906104c891906134c3565b611ed5565b005b3480156104db57600080fd5b506104f660048036038101906104f19190613b28565b611fcd565b005b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662fdd58e84846040518363ffffffff1660e01b8152600401610556929190613b88565b602060405180830381865afa158015610573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105979190613bc6565b905092915050565b600063150b7a0260e01b905095945050505050565b60006067600083815260200190815260200160002060009054906101000a900467ffffffffffffffff169050919050565b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610617600161231b565b9050801561063b576001600060016101000a81548160ff0219169083151502179055505b6106448361240b565b61064d8261244f565b610655612493565b80156106ae5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516106a59190613c3b565b60405180910390a15b505050565b6106bb6124ec565b73ffffffffffffffffffffffffffffffffffffffff166106d9611ae8565b73ffffffffffffffffffffffffffffffffffffffff161461072f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072690613cb3565b60405180910390fd5b6000606560008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e290613d1f565b60405180910390fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff166324cfea24846040518263ffffffff1660e01b81526004016108299190613dd4565b6020604051808303816000875af1158015610848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086c9190613bc6565b83606001818152505061088883602001518385606001516124f4565b60008173ffffffffffffffffffffffffffffffffffffffff1663d2827962856040518263ffffffff1660e01b81526004016108c39190613dd4565b6000604051808303816000875af11580156108e2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061090b9190613f17565b9050836000015173ffffffffffffffffffffffffffffffffffffffff167f1d49c529033eceb62c438cdb44a9b4136529bf470a0679bda6327609b2936a1585602001518660600151846040516109639392919061403e565b60405180910390a25050505050565b6000600f905090565b6109836124ec565b73ffffffffffffffffffffffffffffffffffffffff166109a1611ae8565b73ffffffffffffffffffffffffffffffffffffffff16146109f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ee90613cb3565b60405180910390fd5b610a008161244f565b50565b60008282905011610a49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a40906140c8565b60405180910390fd5b60648282905010610a8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8690614134565b60405180910390fd5b610a976124ec565b73ffffffffffffffffffffffffffffffffffffffff167fbe200d61ad43059077b23e451d9bf57d6f9a52bd0c161bb067c694a9680b747b600067ffffffffffffffff811115610ae957610ae8613341565b5b604051908082528060200260200182016040528015610b2257816020015b610b0f612f55565b815260200190600190039081610b075790505b508484604051610b3493929190614463565b60405180910390a25050565b610b486124ec565b73ffffffffffffffffffffffffffffffffffffffff16610b66611ae8565b73ffffffffffffffffffffffffffffffffffffffff1614610bbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb390613cb3565b60405180910390fd5b610bc6600061262a565b565b610bd06124ec565b73ffffffffffffffffffffffffffffffffffffffff16610bee611ae8565b73ffffffffffffffffffffffffffffffffffffffff1614610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90613cb3565b60405180910390fd5b6000868690501180610c595750600084849050115b80610c675750600082829050115b610ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9d906140c8565b60405180910390fd5b838390508686905014610cee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce5906144e8565b60405180910390fd5b6000828290501115610dd65760005b82829050811015610d9b57828282818110610d1b57610d1a614508565b5b9050604002016020016020810190610d3391906139e5565b60676000858585818110610d4a57610d49614508565b5b90506040020160000135815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508080610d9390614566565b915050610cfd565b507f9ca9a07171664d7406dd7afc6241adb9f7adc5544eea9fae0ddb761c983a26028282604051610dcd9291906146bc565b60405180910390a15b60005b86869050811015610ed257606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b93bc654888884818110610e3557610e34614508565b5b9050602002016020810190610e4a91906134c3565b878785818110610e5d57610e5c614508565b5b9050602002810190610e6f91906146ef565b6040518463ffffffff1660e01b8152600401610e8d939291906148cd565b600060405180830381600087803b158015610ea757600080fd5b505af1158015610ebb573d6000803e3d6000fd5b505050508080610eca90614566565b915050610dd9565b50505050505050565b610ee36124ec565b73ffffffffffffffffffffffffffffffffffffffff16610f01611ae8565b73ffffffffffffffffffffffffffffffffffffffff1614610f57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4e90613cb3565b60405180910390fd5b6000606560008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611013576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100a90613d1f565b60405180910390fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff166324cfea24846040518263ffffffff1660e01b81526004016110519190613dd4565b6020604051808303816000875af1158015611070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110949190613bc6565b8360600181815250506110b083602001518385606001516124f4565b60008173ffffffffffffffffffffffffffffffffffffffff1663d2827962856040518263ffffffff1660e01b81526004016110eb9190613dd4565b6000604051808303816000875af115801561110a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111339190613f17565b9050836000015173ffffffffffffffffffffffffffffffffffffffff167f1d49c529033eceb62c438cdb44a9b4136529bf470a0679bda6327609b2936a15856020015186606001518460405161118b9392919061403e565b60405180910390a25050505050565b600082829050116111e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d7906140c8565b60405180910390fd5b60005b828290508110156115575761122183838381811061120457611203614508565b5b905060400201600001602081019061121c91906134c3565b6126f0565b1561136f57606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bff849af61126c6124ec565b85858581811061127f5761127e614508565b5b905060400201600001602081019061129791906134c3565b73ffffffffffffffffffffffffffffffffffffffff168686868181106112c0576112bf614508565b5b905060400201602001356040518463ffffffff1660e01b81526004016112e8939291906148ff565b6020604051808303816000875af1158015611307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132b919061494b565b61136a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611361906149c4565b60405180910390fd5b611544565b82828281811061138257611381614508565b5b90506040020160200135606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662fdd58e6113d16124ec565b8686868181106113e4576113e3614508565b5b90506040020160000160208101906113fc91906134c3565b73ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b815260040161142f929190613b88565b602060405180830381865afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114709190613bc6565b10156114b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a890614a30565b60405180910390fd5b8282828181106114c4576114c3614508565b5b905060400201602001356115028484848181106114e4576114e3614508565b5b90506040020160000160208101906114fc91906134c3565b306128ee565b1015611543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a90614a9c565b60405180910390fd5b5b808061154f90614566565b9150506111e3565b506115606124ec565b73ffffffffffffffffffffffffffffffffffffffff167fec5e01b991d2efa80b7db0d1cfbb1eaa52cef5bcd365bc1a8d10db57e29bd37083836040516115a7929190614ba9565b60405180910390a25050565b60003411806115c3575060008351115b806115d15750600082829050115b611610576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611607906140c8565b60405180910390fd5b6064835110611654576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164b90614c19565b60405180910390fd5b6064828290501061169a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169190614134565b60405180910390fd5b60008034116116aa5760006116ad565b60015b60ff1684516116bc9190614c39565b67ffffffffffffffff8111156116d5576116d4613341565b5b60405190808252806020026020018201604052801561170e57816020015b6116fb612f55565b8152602001906001900390816116f35790505b50905060005b845181101561190757600085828151811061173257611731614508565b5b6020026020010151602001519050600061177187848151811061175857611757614508565b5b60200260200101516000015161176c6124ec565b6128ee565b905061179a87848151811061178957611788614508565b5b6020026020010151600001516126f0565b15611844576117cf8784815181106117b5576117b4614508565b5b6020026020010151600001516117c96124ec565b84612a13565b61180e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611805906149c4565b60405180910390fd5b61183f87848151811061182457611823614508565b5b6020026020010151600001516118386124ec565b3085612b29565b6118b9565b81811015611887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187e90614cdb565b60405180910390fd5b6118b887848151811061189d5761189c614508565b5b6020026020010151600001516118b16124ec565b3085612c62565b5b8683815181106118cc576118cb614508565b5b60200260200101518484815181106118e7576118e6614508565b5b6020026020010181905250505080806118ff90614566565b915050611714565b506000341115611a0157606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561197b57600080fd5b505af115801561198f573d6000803e3d6000fd5b50505050506040518060400160405280606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200134815250818551815181106119f5576119f4614508565b5b60200260200101819052505b611a096124ec565b73ffffffffffffffffffffffffffffffffffffffff167fbe200d61ad43059077b23e451d9bf57d6f9a52bd0c161bb067c694a9680b747b828585604051611a5293929190614463565b60405180910390a250505050565b611a686124ec565b73ffffffffffffffffffffffffffffffffffffffff16611a86611ae8565b73ffffffffffffffffffffffffffffffffffffffff1614611adc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad390613cb3565b60405180910390fd5b611ae58161240b565b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611b1a6124ec565b73ffffffffffffffffffffffffffffffffffffffff16611b38611ae8565b73ffffffffffffffffffffffffffffffffffffffff1614611b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8590613cb3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf590614d47565b60405180910390fd5b80606560008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f5100db44b9a2483f1081e59ca07cf43239cdb41ac19177d670a0f1dd9218e03360405160405180910390a25050565b6000606660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900460070b9050919050565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611d176124ec565b73ffffffffffffffffffffffffffffffffffffffff16611d35611ae8565b73ffffffffffffffffffffffffffffffffffffffff1614611d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8290613cb3565b60405180910390fd5b60008282905011611dd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc890614db3565b60405180910390fd5b60005b82829050811015611e9757828282818110611df257611df1614508565b5b9050604002016020016020810190611e0a9190614dff565b60666000858585818110611e2157611e20614508565b5b9050604002016000016020810190611e3991906139e5565b67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff1602179055508080611e8f90614566565b915050611dd4565b507fff00257c3569c0e5756880ff104be3382f3c97ef1c24aa411ad63b6d8a1fb5618282604051611ec9929190614f39565b60405180910390a15050565b611edd6124ec565b73ffffffffffffffffffffffffffffffffffffffff16611efb611ae8565b73ffffffffffffffffffffffffffffffffffffffff1614611f51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4890613cb3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611fc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb890614fcf565b60405180910390fd5b611fca8161262a565b50565b611fd56124ec565b73ffffffffffffffffffffffffffffffffffffffff16611ff3611ae8565b73ffffffffffffffffffffffffffffffffffffffff1614612049576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204090613cb3565b60405180910390fd5b6000828290501161208f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612086906140c8565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167fa3ce8112d8a6d3ba7ba8a6ce13e8c518781516d7b39024ef3bb73c3c16500fe983836040516120d7929190614ba9565b60405180910390a260005b828290508110156123155761212083838381811061210357612102614508565b5b905060400201600001602081019061211b91906134c3565b6126f0565b156121cd5761217683838381811061213b5761213a614508565b5b905060400201600001602081019061215391906134c3565b8585858581811061216757612166614508565b5b905060400201602001356124f4565b6121c883838381811061218c5761218b614508565b5b90506040020160000160208101906121a491906134c3565b30868686868181106121b9576121b8614508565b5b90506040020160200135612b29565b612302565b8282828181106121e0576121df614508565b5b9050604002016020013561221e848484818110612200576121ff614508565b5b905060400201600001602081019061221891906134c3565b306128ee565b101561225f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225690614a9c565b60405180910390fd5b6122b083838381811061227557612274614508565b5b905060400201600001602081019061228d91906134c3565b858585858181106122a1576122a0614508565b5b905060400201602001356124f4565b6123018383838181106122c6576122c5614508565b5b90506040020160000160208101906122de91906134c3565b858585858181106122f2576122f1614508565b5b90506040020160200135612d9b565b5b808061230d90614566565b9150506120e2565b50505050565b60008060019054906101000a900460ff16156123925760018260ff1614801561234a575061234830612ed1565b155b612389576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238090615061565b60405180910390fd5b60009050612406565b8160ff1660008054906101000a900460ff1660ff16106123e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123de90615061565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b80606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900460ff166124e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d9906150f3565b60405180910390fd5b6124ea612ef4565b565b600033905090565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b38585604051602401612526929190613b88565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612574919061518d565b6000604051808303816000865af19150503d80600081146125b1576040519150601f19603f3d011682016040523d82523d6000602084013e6125b6565b606091505b50915091508180156125e457506000815114806125e35750808060200190518101906125e2919061494b565b5b5b612623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261a906151f0565b60405180910390fd5b5050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060008373ffffffffffffffffffffffffffffffffffffffff166301ffc9a76380ac58cd60e01b60405160240161272991906131bf565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612777919061518d565b6000604051808303816000865af19150503d80600081146127b4576040519150601f19603f3d011682016040523d82523d6000602084013e6127b9565b606091505b50915091508180156127cc575060008151115b80156127e85750808060200190518101906127e7919061494b565b5b156128e7578373ffffffffffffffffffffffffffffffffffffffff166301ffc9a7635b5e139f60e01b60405160240161282191906131bf565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161286f919061518d565b6000604051808303816000865af19150503d80600081146128ac576040519150601f19603f3d011682016040523d82523d6000602084013e6128b1565b606091505b5080925081935050508180156128c8575060008151115b80156128e45750808060200190518101906128e3919061494b565b5b92505b5050919050565b60008060008473ffffffffffffffffffffffffffffffffffffffff166370a0823185604051602401612920919061398a565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161296e919061518d565b6000604051808303816000865af19150503d80600081146129ab576040519150601f19603f3d011682016040523d82523d6000602084013e6129b0565b606091505b5091509150816129f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ec9061525c565b60405180910390fd5b80806020019051810190612a099190613bc6565b9250505092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff16636352211e84604051602401612a43919061307c565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612a91919061518d565b6000604051808303816000865af19150503d8060008114612ace576040519150601f19603f3d011682016040523d82523d6000602084013e612ad3565b606091505b50915050600081806020019051810190612aed91906152ba565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614925050509392505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166342842e0e868686604051602401612b5d939291906152e7565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612bab919061518d565b6000604051808303816000865af19150503d8060008114612be8576040519150601f19603f3d011682016040523d82523d6000602084013e612bed565b606091505b5091509150818015612c1b5750600081511480612c1a575080806020019051810190612c19919061494b565b5b5b612c5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c519061536a565b60405180910390fd5b505050505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401612c96939291906152e7565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612ce4919061518d565b6000604051808303816000865af19150503d8060008114612d21576040519150601f19603f3d011682016040523d82523d6000602084013e612d26565b606091505b5091509150818015612d545750600081511480612d53575080806020019051810190612d52919061494b565b5b5b612d93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d8a906153d6565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401612dcd929190613b88565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612e1b919061518d565b6000604051808303816000865af19150503d8060008114612e58576040519150601f19603f3d011682016040523d82523d6000602084013e612e5d565b606091505b5091509150818015612e8b5750600081511480612e8a575080806020019051810190612e89919061494b565b5b5b612eca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ec190615442565b60405180910390fd5b5050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f3a906150f3565b60405180910390fd5b612f53612f4e6124ec565b61262a565b565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612fc482612f99565b9050919050565b612fd481612fb9565b8114612fdf57600080fd5b50565b600081359050612ff181612fcb565b92915050565b6000819050919050565b61300a81612ff7565b811461301557600080fd5b50565b60008135905061302781613001565b92915050565b6000806040838503121561304457613043612f8f565b5b600061305285828601612fe2565b925050602061306385828601613018565b9150509250929050565b61307681612ff7565b82525050565b6000602082019050613091600083018461306d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126130bc576130bb613097565b5b8235905067ffffffffffffffff8111156130d9576130d861309c565b5b6020830191508360018202830111156130f5576130f46130a1565b5b9250929050565b60008060008060006080868803121561311857613117612f8f565b5b600061312688828901612fe2565b955050602061313788828901612fe2565b945050604061314888828901613018565b935050606086013567ffffffffffffffff81111561316957613168612f94565b5b613175888289016130a6565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6131b981613184565b82525050565b60006020820190506131d460008301846131b0565b92915050565b6000602082840312156131f0576131ef612f8f565b5b60006131fe84828501613018565b91505092915050565b600067ffffffffffffffff82169050919050565b61322481613207565b82525050565b600060208201905061323f600083018461321b565b92915050565b6000819050919050565b600061326a61326561326084612f99565b613245565b612f99565b9050919050565b600061327c8261324f565b9050919050565b600061328e82613271565b9050919050565b61329e81613283565b82525050565b60006020820190506132b96000830184613295565b92915050565b600080604083850312156132d6576132d5612f8f565b5b60006132e485828601612fe2565b92505060206132f585828601612fe2565b9150509250929050565b61330881613207565b811461331357600080fd5b50565b600081359050613325816132ff565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61337982613330565b810181811067ffffffffffffffff8211171561339857613397613341565b5b80604052505050565b60006133ab612f85565b90506133b78282613370565b919050565b600062ffffff82169050919050565b6133d4816133bc565b81146133df57600080fd5b50565b6000813590506133f1816133cb565b92915050565b600060a0828403121561340d5761340c61332b565b5b61341760a06133a1565b9050600061342784828501612fe2565b600083015250602061343b84828501612fe2565b602083015250604061344f84828501612fe2565b604083015250606061346384828501613018565b6060830152506080613477848285016133e2565b60808301525092915050565b60008060c0838503121561349a57613499612f8f565b5b60006134a885828601613316565b92505060206134b9858286016133f7565b9150509250929050565b6000602082840312156134d9576134d8612f8f565b5b60006134e784828501612fe2565b91505092915050565b60008083601f84011261350657613505613097565b5b8235905067ffffffffffffffff8111156135235761352261309c565b5b60208301915083602082028301111561353f5761353e6130a1565b5b9250929050565b6000806020838503121561355d5761355c612f8f565b5b600083013567ffffffffffffffff81111561357b5761357a612f94565b5b613587858286016134f0565b92509250509250929050565b60008083601f8401126135a9576135a8613097565b5b8235905067ffffffffffffffff8111156135c6576135c561309c565b5b6020830191508360208202830111156135e2576135e16130a1565b5b9250929050565b60008083601f8401126135ff576135fe613097565b5b8235905067ffffffffffffffff81111561361c5761361b61309c565b5b602083019150836020820283011115613638576136376130a1565b5b9250929050565b60008083601f84011261365557613654613097565b5b8235905067ffffffffffffffff8111156136725761367161309c565b5b60208301915083604082028301111561368e5761368d6130a1565b5b9250929050565b600080600080600080606087890312156136b2576136b1612f8f565b5b600087013567ffffffffffffffff8111156136d0576136cf612f94565b5b6136dc89828a01613593565b9650965050602087013567ffffffffffffffff8111156136ff576136fe612f94565b5b61370b89828a016135e9565b9450945050604087013567ffffffffffffffff81111561372e5761372d612f94565b5b61373a89828a0161363f565b92509250509295509295509295565b60008083601f84011261375f5761375e613097565b5b8235905067ffffffffffffffff81111561377c5761377b61309c565b5b602083019150836040820283011115613798576137976130a1565b5b9250929050565b600080602083850312156137b6576137b5612f8f565b5b600083013567ffffffffffffffff8111156137d4576137d3612f94565b5b6137e085828601613749565b92509250509250929050565b600067ffffffffffffffff82111561380757613806613341565b5b602082029050602081019050919050565b60006040828403121561382e5761382d61332b565b5b61383860406133a1565b9050600061384884828501612fe2565b600083015250602061385c84828501613018565b60208301525092915050565b600061387b613876846137ec565b6133a1565b9050808382526020820190506040840283018581111561389e5761389d6130a1565b5b835b818110156138c757806138b38882613818565b8452602084019350506040810190506138a0565b5050509392505050565b600082601f8301126138e6576138e5613097565b5b81356138f6848260208601613868565b91505092915050565b60008060006040848603121561391857613917612f8f565b5b600084013567ffffffffffffffff81111561393657613935612f94565b5b613942868287016138d1565b935050602084013567ffffffffffffffff81111561396357613962612f94565b5b61396f868287016134f0565b92509250509250925092565b61398481612fb9565b82525050565b600060208201905061399f600083018461397b565b92915050565b600080604083850312156139bc576139bb612f8f565b5b60006139ca85828601613316565b92505060206139db85828601612fe2565b9150509250929050565b6000602082840312156139fb576139fa612f8f565b5b6000613a0984828501613316565b91505092915050565b60008160070b9050919050565b613a2881613a12565b82525050565b6000602082019050613a436000830184613a1f565b92915050565b6000613a5482613271565b9050919050565b613a6481613a49565b82525050565b6000602082019050613a7f6000830184613a5b565b92915050565b60008083601f840112613a9b57613a9a613097565b5b8235905067ffffffffffffffff811115613ab857613ab761309c565b5b602083019150836040820283011115613ad457613ad36130a1565b5b9250929050565b60008060208385031215613af257613af1612f8f565b5b600083013567ffffffffffffffff811115613b1057613b0f612f94565b5b613b1c85828601613a85565b92509250509250929050565b600080600060408486031215613b4157613b40612f8f565b5b6000613b4f86828701612fe2565b935050602084013567ffffffffffffffff811115613b7057613b6f612f94565b5b613b7c86828701613749565b92509250509250925092565b6000604082019050613b9d600083018561397b565b613baa602083018461306d565b9392505050565b600081519050613bc081613001565b92915050565b600060208284031215613bdc57613bdb612f8f565b5b6000613bea84828501613bb1565b91505092915050565b6000819050919050565b600060ff82169050919050565b6000613c25613c20613c1b84613bf3565b613245565b613bfd565b9050919050565b613c3581613c0a565b82525050565b6000602082019050613c506000830184613c2c565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613c9d602083613c56565b9150613ca882613c67565b602082019050919050565b60006020820190508181036000830152613ccc81613c90565b9050919050565b7f70726f746f636f6c20696e636f72726563740000000000000000000000000000600082015250565b6000613d09601283613c56565b9150613d1482613cd3565b602082019050919050565b60006020820190508181036000830152613d3881613cfc565b9050919050565b613d4881612fb9565b82525050565b613d5781612ff7565b82525050565b613d66816133bc565b82525050565b60a082016000820151613d826000850182613d3f565b506020820151613d956020850182613d3f565b506040820151613da86040850182613d3f565b506060820151613dbb6060850182613d4e565b506080820151613dce6080850182613d5d565b50505050565b600060a082019050613de96000830184613d6c565b92915050565b600067ffffffffffffffff821115613e0a57613e09613341565b5b602082029050602081019050919050565b600081519050613e2a81612fcb565b92915050565b600060408284031215613e4657613e4561332b565b5b613e5060406133a1565b90506000613e6084828501613e1b565b6000830152506020613e7484828501613bb1565b60208301525092915050565b6000613e93613e8e84613def565b6133a1565b90508083825260208201905060408402830185811115613eb657613eb56130a1565b5b835b81811015613edf5780613ecb8882613e30565b845260208401935050604081019050613eb8565b5050509392505050565b600082601f830112613efe57613efd613097565b5b8151613f0e848260208601613e80565b91505092915050565b600060208284031215613f2d57613f2c612f8f565b5b600082015167ffffffffffffffff811115613f4b57613f4a612f94565b5b613f5784828501613ee9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b604082016000820151613fa26000850182613d3f565b506020820151613fb56020850182613d4e565b50505050565b6000613fc78383613f8c565b60408301905092915050565b6000602082019050919050565b6000613feb82613f60565b613ff58185613f6b565b935061400083613f7c565b8060005b838110156140315781516140188882613fbb565b975061402383613fd3565b925050600181019050614004565b5085935050505092915050565b6000606082019050614053600083018661397b565b614060602083018561306d565b81810360408301526140728184613fe0565b9050949350505050565b7f302d6c656e206172677300000000000000000000000000000000000000000000600082015250565b60006140b2600a83613c56565b91506140bd8261407c565b602082019050919050565b600060208201905081810360008301526140e1816140a5565b9050919050565b7f416374696f6e206c696d69740000000000000000000000000000000000000000600082015250565b600061411e600c83613c56565b9150614129826140e8565b602082019050919050565b6000602082019050818103600083015261414d81614111565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6040820160008201516141966000850182613d3f565b5060208201516141a96020850182613d4e565b50505050565b60006141bb8383614180565b60408301905092915050565b6000602082019050919050565b60006141df82614154565b6141e9818561415f565b93506141f483614170565b8060005b8381101561422557815161420c88826141af565b9750614217836141c7565b9250506001810190506141f8565b5085935050505092915050565b600082825260208201905092915050565b6000819050919050565b600061425c6020840184613018565b905092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126142905761428f61426e565b5b83810192508235915060208301925067ffffffffffffffff8211156142b8576142b7614264565b5b6020820236038413156142ce576142cd614269565b5b509250929050565b600082825260208201905092915050565b600080fd5b82818337600083830152505050565b600061430783856142d6565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561433a576143396142e7565b5b60208302925061434b8385846142ec565b82840190509392505050565b60006040830161436a600084018461424d565b6143776000860182613d4e565b506143856020840184614273565b85830360208701526143988382846142fb565b925050508091505092915050565b60006143b28383614357565b905092915050565b6000823560016040038336030381126143d6576143d561426e565b5b82810191505092915050565b6000602082019050919050565b60006143fb8385614232565b93508360208402850161440d84614243565b8060005b8781101561445157848403895261442882846143ba565b61443285826143a6565b945061443d836143e2565b925060208a01995050600181019050614411565b50829750879450505050509392505050565b6000604082019050818103600083015261447d81866141d4565b905081810360208301526144928184866143ef565b9050949350505050565b7f617267732d6c656e204d69736d61746368000000000000000000000000000000600082015250565b60006144d2601183613c56565b91506144dd8261449c565b602082019050919050565b60006020820190508181036000830152614501816144c5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061457182612ff7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156145a4576145a3614537565b5b600182019050919050565b600082825260208201905092915050565b6000819050919050565b60006145d96020840184613316565b905092915050565b6145ea81613207565b82525050565b60408201614601600083018361424d565b61460e6000850182613d4e565b5061461c60208301836145ca565b61462960208501826145e1565b50505050565b600061463b83836145f0565b60408301905092915050565b600082905092915050565b6000604082019050919050565b600061466b83856145af565b9350614676826145c0565b8060005b858110156146af5761468c8284614647565b614696888261462f565b97506146a183614652565b92505060018101905061467a565b5085925050509392505050565b600060208201905081810360008301526146d781848661465f565b90509392505050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261470c5761470b6146e0565b5b80840192508235915067ffffffffffffffff82111561472e5761472d6146e5565b5b60208301925060808202360383131561474a576147496146ea565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b60008115159050919050565b6147828161476d565b811461478d57600080fd5b50565b60008135905061479f81614779565b92915050565b60006147b46020840184614790565b905092915050565b6147c58161476d565b82525050565b608082016147dc600083018361424d565b6147e96000850182613d4e565b506147f7602083018361424d565b6148046020850182613d4e565b5061481260408301836147a5565b61481f60408501826147bc565b5061482d60608301836145ca565b61483a60608501826145e1565b50505050565b600061484c83836147cb565b60808301905092915050565b600082905092915050565b6000608082019050919050565b600061487c8385614752565b935061488782614763565b8060005b858110156148c05761489d8284614858565b6148a78882614840565b97506148b283614863565b92505060018101905061488b565b5085925050509392505050565b60006040820190506148e2600083018661397b565b81810360208301526148f5818486614870565b9050949350505050565b6000606082019050614914600083018661397b565b614921602083018561306d565b61492e604083018461306d565b949350505050565b60008151905061494581614779565b92915050565b60006020828403121561496157614960612f8f565b5b600061496f84828501614936565b91505092915050565b7f4e6f7420455243373231204f776e657200000000000000000000000000000000600082015250565b60006149ae601083613c56565b91506149b982614978565b602082019050919050565b600060208201905081810360008301526149dd816149a1565b9050919050565b7f496e73756666696369656e7420546f6b656e0000000000000000000000000000600082015250565b6000614a1a601283613c56565b9150614a25826149e4565b602082019050919050565b60006020820190508181036000830152614a4981614a0d565b9050919050565b7f496e73756666696369656e7420706f6f6c20546f6b656e000000000000000000600082015250565b6000614a86601783613c56565b9150614a9182614a50565b602082019050919050565b60006020820190508181036000830152614ab581614a79565b9050919050565b6000819050919050565b6000614ad56020840184612fe2565b905092915050565b60408201614aee6000830183614ac6565b614afb6000850182613d3f565b50614b09602083018361424d565b614b166020850182613d4e565b50505050565b6000614b288383614add565b60408301905092915050565b600082905092915050565b6000604082019050919050565b6000614b58838561415f565b9350614b6382614abc565b8060005b85811015614b9c57614b798284614b34565b614b838882614b1c565b9750614b8e83614b3f565b925050600181019050614b67565b5085925050509392505050565b60006020820190508181036000830152614bc4818486614b4c565b90509392505050565b7f546f6b656e206c696d6974000000000000000000000000000000000000000000600082015250565b6000614c03600b83613c56565b9150614c0e82614bcd565b602082019050919050565b60006020820190508181036000830152614c3281614bf6565b9050919050565b6000614c4482612ff7565b9150614c4f83612ff7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614c8457614c83614537565b5b828201905092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000614cc5601483613c56565b9150614cd082614c8f565b602082019050919050565b60006020820190508181036000830152614cf481614cb8565b9050919050565b7f70726f746f636f6c2063616e6e6f742062652030000000000000000000000000600082015250565b6000614d31601483613c56565b9150614d3c82614cfb565b602082019050919050565b60006020820190508181036000830152614d6081614d24565b9050919050565b7f76617269626c65206c656e677468203d3d203000000000000000000000000000600082015250565b6000614d9d601383613c56565b9150614da882614d67565b602082019050919050565b60006020820190508181036000830152614dcc81614d90565b9050919050565b614ddc81613a12565b8114614de757600080fd5b50565b600081359050614df981614dd3565b92915050565b600060208284031215614e1557614e14612f8f565b5b6000614e2384828501614dea565b91505092915050565b600082825260208201905092915050565b6000819050919050565b6000614e566020840184614dea565b905092915050565b614e6781613a12565b82525050565b60408201614e7e60008301836145ca565b614e8b60008501826145e1565b50614e996020830183614e47565b614ea66020850182614e5e565b50505050565b6000614eb88383614e6d565b60408301905092915050565b600082905092915050565b6000604082019050919050565b6000614ee88385614e2c565b9350614ef382614e3d565b8060005b85811015614f2c57614f098284614ec4565b614f138882614eac565b9750614f1e83614ecf565b925050600181019050614ef7565b5085925050509392505050565b60006020820190508181036000830152614f54818486614edc565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614fb9602683613c56565b9150614fc482614f5d565b604082019050919050565b60006020820190508181036000830152614fe881614fac565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061504b602e83613c56565b915061505682614fef565b604082019050919050565b6000602082019050818103600083015261507a8161503e565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006150dd602b83613c56565b91506150e882615081565b604082019050919050565b6000602082019050818103600083015261510c816150d0565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561514757808201518184015260208101905061512c565b83811115615156576000848401525b50505050565b600061516782615113565b615171818561511e565b9350615181818560208601615129565b80840191505092915050565b6000615199828461515c565b915081905092915050565b7f617070726f7665206661696c6564000000000000000000000000000000000000600082015250565b60006151da600e83613c56565b91506151e5826151a4565b602082019050919050565b60006020820190508181036000830152615209816151cd565b9050919050565b7f62616c616e63654f66206661696c656400000000000000000000000000000000600082015250565b6000615246601083613c56565b915061525182615210565b602082019050919050565b6000602082019050818103600083015261527581615239565b9050919050565b600061528782612f99565b9050919050565b6152978161527c565b81146152a257600080fd5b50565b6000815190506152b48161528e565b92915050565b6000602082840312156152d0576152cf612f8f565b5b60006152de848285016152a5565b91505092915050565b60006060820190506152fc600083018661397b565b615309602083018561397b565b615316604083018461306d565b949350505050565b7f65726337323120736166655472616e7366657246726f6d206661696c65640000600082015250565b6000615354601e83613c56565b915061535f8261531e565b602082019050919050565b6000602082019050818103600083015261538381615347565b9050919050565b7f7472616e7366657246726f6d206661696c656400000000000000000000000000600082015250565b60006153c0601383613c56565b91506153cb8261538a565b602082019050919050565b600060208201905081810360008301526153ef816153b3565b9050919050565b7f7472616e73666572206661696c65640000000000000000000000000000000000600082015250565b600061542c600f83613c56565b9150615437826153f6565b602082019050919050565b6000602082019050818103600083015261545b8161541f565b905091905056fea26469706673582212200ef47f194961db38155c9c1e4a0ef0a42b0601984661fa6481fef228517d0d9964736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "serverTransferFunds(address,(address,uint256)[])": {
        "details": "serverTransferFunds only transfers external tokens out, does not check nor update internal balance"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/InfinityPool.sol:InfinityPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/InfinityPool.sol:InfinityPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 549,
        "contract": "contracts/InfinityPool.sol:InfinityPool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/InfinityPool.sol:InfinityPool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/InfinityPool.sol:InfinityPool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 728,
        "contract": "contracts/InfinityPool.sol:InfinityPool",
        "label": "liquidationProtocolAddresses",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint64,t_address)"
      },
      {
        "astId": 732,
        "contract": "contracts/InfinityPool.sol:InfinityPool",
        "label": "productVariables",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint64,t_int64)"
      },
      {
        "astId": 736,
        "contract": "contracts/InfinityPool.sol:InfinityPool",
        "label": "priceIndexes",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_uint64)"
      },
      {
        "astId": 739,
        "contract": "contracts/InfinityPool.sol:InfinityPool",
        "label": "poolToken",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IInfinityToken)2099"
      },
      {
        "astId": 742,
        "contract": "contracts/InfinityPool.sol:InfinityPool",
        "label": "weth",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IWETH)2150"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IInfinityToken)2099": {
        "encoding": "inplace",
        "label": "contract IInfinityToken",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)2150": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_int64": {
        "encoding": "inplace",
        "label": "int64",
        "numberOfBytes": "8"
      },
      "t_mapping(t_uint256,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_uint64,t_address)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint64,t_int64)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => int64)",
        "numberOfBytes": "32",
        "value": "t_int64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}